[ WindowsControl ("/miscellaneous/ICONS??/Frame??.png") ]
[ ClassId ("33AD5018-6699-11CF-B70C-00AA0060D393") ]
[ InterfaceId ("5DE41174-FC12-47FB-BDCC-FA752DE51110") ]    ' FIXME implement {33AD5019-6699-11CF-B70C-00AA0060D393} for backcompat
' WARNING: above InterfaceId is referred to as IID_ITBPropertyPage in tB Sources
[ COMCreatable (False) ]
[ COMExtensible (True) ]
[ EventsUseDispInterface ]
[ ComImport (True) ]
Class PropertyPage
        
    Enum EnumStandardSize
        StandardSizeCustom = 0
        StandardSizeSmall = 1
        StandardSizeLarge = 2
    End Enum
        
     #Region "INHERITANCE"
     
        [ WithDispatchForwarding ] Implements Control
        Implements WindowsControls.IWindowsControl
        Implements WinNativeFormsBASE.BasePropertyPage Via _BasePropertyPage = New WinNativeFormsBASE.BasePropertyPage
        Implements GraphicsBase Via _BaseGraphics = New GraphicsBase

    #End Region
        
    #Region "STATE"

            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private IsInitialized As Boolean
            Private IsDesignMode As Boolean
            Private RegisteredChildOLEDropCount As Long = 0
            Private IsRegisteredItselfForOLEDragDrop As Boolean = False
            
        [ Serialize (True, "Picture") ]
        [ CustomDesigner ("designer_PictureBytes") ]
            Private ReadOnly PictureINIT() As Byte
        
        [ Unimplemented ]
        [ Serialize (True, "Palette") ]
        [ CustomDesigner ("designer_PictureBytes") ]
            Private ReadOnly PaletteINIT() As Byte
        [ Unimplemented ]
        [ Serialize (False) ]
            Public Palette As StdPicture

            Public HelpContextID As Long
            
        [ Unimplemented ]
            Public StandardSize As EnumStandardSize = EnumStandardSize.StandardSizeCustom
        
        [ CustomDesigner ("designer_RestrictedOLEDropMode") ]
            Public OLEDropMode As VBRUN.OLEDropConstants
        [ Unimplemented ]
            Public PaletteMode As VBRUN.PaletteModeConstants
        [ Unimplemented ]
            Public RightToLeft As Boolean
                        
        [ Serialize (False) ]
        [ Unimplemented ]
            Public ReadOnly Image As StdPicture          ' persistent bitmap
                    
        Public Sub OLEDrag()
            InternalOLEDrag(Me)
        End Sub
            
        [ Unimplemented ]
            Public Function Point(ByVal X As Single, ByVal Y As Single) As Long
            End Function
                        
            Public Sub ValidateControls()
                On Error GoTo Error
                If Me.ActiveControl IsNot Nothing Then
                    If Me.ActiveControl.CausesValidation Then
                        Dim Cancel As Boolean = False
                        On Error Resume Next
                        RaiseEventByName2(Me.ActiveControl, "Validate", Cancel)
                        If Cancel Then
                            On Error GoTo 0
                            Err.Raise 380, , "Invalid property value"
                        End If
                    End If
                End If
                Exit Sub
                Error:
            End Sub
                        
    #End Region

    #Region "EVENTS"
    
        Event ApplyChanges()
        Event Click()
        Event DblClick()
        Event DragDrop(Source As Control, X As Single, Y As Single)
        Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        Event EditProperty(PropertyName As String)
        Event GotFocus()
        Event Initialize()
        Event KeyDown(KeyCode As Integer, Shift As Integer)
        Event KeyPress(KeyAscii As Integer)
        Event KeyUp(KeyCode As Integer, Shift As Integer)
        Event LostFocus()
        Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        Event Paint()
        Event SelectionChanged()
        Event Terminate()
                
    #End Region
               
    #Region "MEMBERS"

        Public Sub New()
            ' This constructor is useful for allowing control inheritance
        End Sub
        
        Public Sub New(Serializer As WindowsControls.SerializationInfo)
            'Debug.Print "Form.New"
            ' FIXME Deserializing here is not quite correct for proper VB6 back compat
            ' (it needs to be done on first access to any member, and again on NEXT member access AFTER a close in a re-open scenario)
            If Not Serializer.Deserialize(Me) Then
                InitializeDefaultValues
            End If
            'RaiseEvent Initialize()         cant fire in constructor, as not assigned yet
            
            IsDesignMode = Serializer.IsDesignMode

            ' This allows dispatch calls to pass on to the outer form controller, allowing for extensibility            
            Dim tbInternal As ITwinBasicInternalClassSupport = Me
            tbInternal.OverrideDispatchHandler Serializer.GetRootClassDispatch  ' this causes a circular reference that needs to be manually broken in IOleObject_Close

            If IsArrayInitialized(Me.PictureINIT) AndAlso (UBound(Me.PictureINIT) > -1) Then
                ' LoadPicture can now be passed a byte-array containing an in-memory stream
                On Error Resume Next
                Set Me.Picture = Global.LoadPicture(Me.PictureINIT)
            End If
                        
        End Sub
        
        ' Private Sub OnTouchedFormProperties() _
        '         Handles BackColor.OnPropertyGet, _
        '                 ForeColor.OnPropertyGet, _
        '                 ForeColor.OnPropertyLet

        '     Me.ControlContext.EnsureFormIsLoaded()
        ' End Sub
         
        Private Sub Class_Terminate()
            RaiseEvent Terminate()
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize

            Dim styles As Long
            Dim extendedStyles As Long
                
            styles += If(Me.ClipControls = True, WinNativeFormsBASE.WS_CLIPCHILDREN, 0)
                                                                                        
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, If(Me.HasDC, "ThunderFormDC", "ThunderForm"), styles, extendedStyles)
            _BaseGraphics.InitGraphics(Me.RootWindowElement)
'            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
        End Sub
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
            ' disconnect anything that causes a circular reference here
            'Debug.Print "Form::HandleDestroy"
            If IsRegisteredItselfForOLEDragDrop = True Then
                On Error Resume Next
                Me.RegisterOLEDragDrop(False)
                IsRegisteredItselfForOLEDragDrop = False
            End If
            Set Me.[_BaseGraphics] = Nothing
            
'            Debug.Print "Form.HandleDestroy"
        End Sub
        
        Private Sub InitializeDefaultValues()
            BackColor = SystemColorConstants.vbButtonFace
        End Sub
        
        Private Sub HandleLoad() _
                Handles RootWindowElement.Load

            If IsInitialized = False Then InitializeMe
            'RaiseEvent Load()
            
            InternalIsFirstResizeEventAfterLoad = True
        End Sub
        
        Private Sub HandlePreLoad() _
                Handles RootWindowElement.PreLoadForm

            ' At this point the HWND is available, but not correct size etc.
            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
            SyncOLEDropMode()
            
            ' This has to happen here, as it can be accessed via ActiveX ambient properties during creation
            InternalSyncFontProperties(True)
            
            RaiseEvent Initialize()
            
        End Sub
        
        Private Sub HandleGotFocus() _
            Handles RootWindowElement.GotFocus
                
            RaiseEvent GotFocus()
        End Sub

        Private Sub HandleLostFocus() _
                Handles RootWindowElement.LostFocus
                
            RaiseEvent LostFocus()
        End Sub
        
        ' Private Sub HandleEraseBackground(ByVal hdc As LongPtr, ByRef Handled As Boolean) _
        '         Handles RootWindowElement.EraseBackground
                
        '     WinNativeFormsBASE.WindowsAPI.USER32_FillWithBrush(Me.RootWindowElement, hdc, Me.CreateBackBrush(BackColor))
        '     Handled = True     ' swallow up the event
        ' End Sub
        
        Private Sub InitializeMe()
            
            Me.[_BaseGraphics].SyncScaleMode(Me, Me.RootWindowElement)
            
            ' FIXME this is in lieu of having a working Create event here
            _BaseGraphics.ChangeHDC(0, Me.hWnd, Me.RootWindowElement, Me.Picture, Me, True)
            IsInitialized = True
            
        End Sub
           
        'Private Declare PtrSafe Sub Sleep Lib "kernel32.dll" (ByVal dwMilliseconds As Long)
        Private Sub HandlePaint(ByRef Handled As Boolean) _
                Handles RootWindowElement.Paint
                
            'Debug.Print Now() & " Form.Paint"
            'Sleep(2000)
            
            ' Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            ' Me.RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API directly
            '     ' FIXME check paint order
            '     RootWindowElement.PaintContainedWindowlessElements(ps.hdc)
            '     RaiseEvent Paint()
            ' Me.RootWindowElement.EndPaint(ps)
            ' Handled = True     ' swallow up the event
            
            If IsInitialized = False Then InitializeMe
    
            Dim ps As WinNativeFormsBASE.PAINTSTRUCT
            Me.RootWindowElement.BeginPaint(ps)    ' you MUST use this method, and NOT the BeginPaint API 
                
                Me.[_BaseGraphics].OnPaint(ps.hdc)
            
            Me.RootWindowElement.EndPaint(ps)
            Handled = True     ' swallow up the event
        End Sub
        
        ' Private Sub HandleResize() _
        '         Handles RootWindowElement.Resize
                
        '     RaiseEvent Resize()
        ' End Sub
        
        Private Sub HandleKeyDown(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyDown
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyDown(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
        End Sub
        
        Private Sub HandleKeyUp(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyUp
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyUp(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
        End Sub
        
        Private Sub HandleKeyPress(ByRef Key As Integer) _
                Handles RootWindowElement.KeyPress
                
            RaiseEvent KeyPress(Key)
        End Sub
        
        Private Sub HandleMouseDoubleClick(ByVal Button As VBRUN.MouseButtonConstants, _
                                            ByVal X As Single, ByVal Y As Single) _
            Handles RootWindowElement.MouseDoubleClick

            RaiseEvent DblClick()
        End Sub

        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            BeginMouseCapture(Me.RootWindowElement)
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X + Me.ScaleLeft, Y + Me.ScaleTop)
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X + Me.ScaleLeft, Y + Me.ScaleTop)
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseUp

            Dim WasCaptured As Boolean = EndMouseCapture()
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X + Me.ScaleLeft, Y + Me.ScaleTop)
            If WasCaptured And IsInRect(X / Me.ControlContext.GetScaleModePixelsMultiplierX, Y / Me.ControlContext.GetScaleModePixelsMultiplierY) Then RaiseEvent Click()
        End Sub
        
        ' Private Sub ColorsChanged() _
        '         Handles BackColor.OnPropertyLet
            
        '     Me.Refresh
        ' End Sub
        
        [ Serialize (False) ]
        Public Property Get hWnd() As LongPtr
            If Me.RootWindowElement IsNot Nothing Then
                Me.ControlContext.EnsureFormIsLoaded()
                Return Me.RootWindowElement.Handle
            End If
        End Property
                
        [ Serialize (False) ]
        Public Property Get DpiScaleFactorX() As Double ' exposed as X/Y for future 
            Return RootWindowElement.UnitPixelScale
        End Property
        
        [ Serialize (False) ]
        Public Property Get DpiScaleFactorY() As Double ' exposed as X/Y for future 
            Return RootWindowElement.UnitPixelScale
        End Property
        
        Friend Sub InternalRaisePaint()
            RaiseEvent Paint()
        End Sub
        
        [ Serialize (False) ]
        Public Property Get ActiveControl() As Control
            Return Me.RootWindowElement.FormActiveControl
        End Property
        
        [ Serialize (False) ]
        [ DefaultMember ]
        Public Property Get _Default() As Object
            Return Me.Controls
        End Property
        
        [ Serialize (False) ]
        Public Property Get Count() As Long
            Return Me.Controls.Count
        End Property
        
        Private Sub HandleDragOver(ByVal Source As Object, ByVal X As Double, ByVal Y As Double, ByVal State As Long) _
                Handles RootWindowElement.DragOver
            
            If State = 3 Then
                RaiseEvent DragDrop(Source, CSng(X), CSng(Y))
            Else
                RaiseEvent DragOver(Source, CSng(X), CSng(Y), CInt(State))
            End If
        End Sub
        
        Public Sub SetFocus()
            WinNativeFormsBASE.WindowsAPI.USER32_SetFocus(Me.RootWindowElement)
        End Sub
        
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            If Me.OLEDropMode = OLEDropConstants.vbOLEDropManual Then
                If IsRegisteredItselfForOLEDragDrop = False Then
                    Me.RegisterOLEDragDrop(True)
                    IsRegisteredItselfForOLEDragDrop = True
                End If
            ElseIf Me.OLEDropMode = OLEDropConstants.vbOLEDropNone Then
                If IsRegisteredItselfForOLEDragDrop = True Then
                    Me.RegisterOLEDragDrop(False)
                    IsRegisteredItselfForOLEDragDrop = False
                End If
            Else
                Err.Raise 5
            End If
        End Sub
        
        Friend Sub RegisterOLEDragDrop(Register As Boolean)
            If Register = True Then
                RegisteredChildOLEDropCount += 1
                If RegisteredChildOLEDropCount = 1 Then
                    BaseSyncOLEDropMode(Me, OLEDropConstants.vbOLEDropManual, Me.OLEDragDropHandler, True, False)
                End If
            Else
                RegisteredChildOLEDropCount -= 1
                If RegisteredChildOLEDropCount = 0 Then
                    If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
                End If
            End If
        End Sub
    
        [ Enumerator ]
        Public Function InternalEnumerator() As stdole.IUnknown     ' FIXME should not be exposed
            Return CallByDispId(Me.Controls, -4, vbGet)
        End Function
        
        Friend Sub InternalRaiseResize()
        End Sub

    #End Region
    
End Class