[ Description ("A Win32 native ListBox") ]
[ WindowsControl ("/miscellaneous/ICONS??/ListBox??.png") ]
[ ClassId ("33AD4F10-6699-11CF-B70C-00AA0060D393") ]
[ InterfaceId ("8EEBCDA0-C8F9-4A65-85D4-4D5C89655A0F") ]    ' FIXME implement {33AD4F11-6699-11CF-B70C-00AA0060D393} for backcompat
[ COMCreatable (False) ]
[ EventsUseDispInterface ]
[ ComImport (True) ]
Class ListBox
    
    #Region "INHERITANCE"

        [ WithDispatchForwarding ] Implements Control
        Implements WindowsControls.IWindowsControl
        Implements WinNativeFormsBase.BaseControlFocusable Via _BaseControl = New WinNativeFormsBase.BaseControlFocusable(ControlTypeConstants.vbListBox)
        Implements WithEvents DataFieldBinderBase Via _DataFieldBinderBase = New DataFieldBinderBase

    #End Region
        
    #Region "STATE"
    
        [ Description ("") ]
            Public BorderStyle As VBRUN.ControlBorderStyleConstants = ControlBorderStyleConstants.vbFixedSingleBorder
        [ Description ("") ]
            Public Sorted As Boolean = False
        [ Description ("") ]
            Public MultiSelect As VBRUN.MultiSelectConstants = VBRUN.MultiSelectConstants.vbMultiSelectNone
        [ Description ("") ]
            Public Style As VBRUN.ListBoxConstants = VBRUN.ListBoxConstants.vbListBoxStandard
        [ CustomDesigner ("designer_SpectrumWindows") ]
        [ Description ("") ]
            Public BackColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowBackground
        [ CustomDesigner ("designer_SpectrumWindows") ]
        [ Description ("") ]
            Public ForeColor As OLE_COLOR = VBRUN.SystemColorConstants.vbWindowText
        [ Description ("") ]
            Public IntegralHeight As Boolean = True
        [ Description ("") ]
            Public Columns As Long = 0
        [ Serialize (False) ]
        [ Description ("") ]
            Public NewIndex As Long = -1
        [ Description ("VB6 doesn't trigger the Scroll event for mouse-wheel events.  Set this to True to generate Scroll events in response to mouse-wheel notifications") ]
            Public WheelScrollEvent As Boolean = True
        [ Description ("") ]
            Public MaxCheckboxSize As Long = 15
            
        [ Serialize (True, "List") ]
            Private List_INIT() As String
        [ Serialize (True, "ItemData") ]
            ' This field is purposely declared as a Long not LongPtr, since item data stored in the form designer needs to be platform agnostic
            Private ItemData_INIT() As Long
            Private IsMultiColumn As Boolean
            Private CachedTopIndex As Long
            Private CheckBoxState() As Byte
            Private ListBoxImageSize As Long
            Private IsInitializing As Boolean = True
            
            Private WithEvents RootWindowElement As WindowsControls.WindowElement
            Private OLEDragDropHandler As WinNativeFormsBASE.OLEDragDropHandler
            Private MouseDownNeedsManualRelease As Boolean = False
            Private IsDesignMode As Boolean = False
            
            Public CausesValidation As Boolean = True

        Public HelpContextID As Long
        Public OLEDragMode As VBRUN.OLEDragConstants
    
        [ CustomDesigner ("designer_RestrictedOLEDropMode") ]
            Public OLEDropMode As VBRUN.OLEDropConstants
        [ Unimplemented ]
            Public RightToLeft As Boolean

            Public WhatsThisHelpID As Long

        Public Sub OLEDrag()
            InternalOLEDrag(Me)
        End Sub
                        
        Public Sub ShowWhatsThis()
            HelpSystem.ShowControlHelp(Me.Parent, Me, True)
        End Sub
            
    #End Region

    #Region "EVENTS"
    
        [ DefaultDesignerEvent ]
        [ Description ("") ]
            Event Click()
        [ Description ("") ]
            Event DblClick()
        [ Description ("") ]
            Event GotFocus()
        [ Description ("") ]
            Event KeyDown(KeyCode As Integer, Shift As Integer)
        [ Description ("") ]
            Event KeyPress(KeyAscii As Integer)
        [ Description ("") ]
            Event KeyUp(KeyCode As Integer, Shift As Integer)
        [ Description ("") ]
            Event LostFocus()
        [ Description ("") ]
            Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
        [ Description ("") ]
            Event ItemCheck(Item As Integer)
        [ Description ("") ]
            Event Scroll()
        [ Description ("") ]
            Event Initialize()
        [ Description ("") ]
            Event DragDrop(Source As Control, X As Single, Y As Single)
        [ Description ("") ]
            Event DragOver(Source As Control, X As Single, Y As Single, State As Integer)
        
        Event OLECompleteDrag(Effect As Long)
        Event OLEDragDrop(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single)
        Event OLEDragOver(Data As DataObject, Effect As Long, Button As Integer, Shift As Integer, X As Single, Y As Single, State As Integer)
        Event OLEGiveFeedback(Effect As Long, DefaultCursors As Boolean)
        Event OLESetData(Data As DataObject, DataFormat As Integer)
        Event OLEStartDrag(Data As DataObject, AllowedEffects As Long)
        Event Validate(Cancel As Boolean)

    #End Region
               
    #Region "MEMBERS"
     
        Public Sub New()
            ' This constructor is useful for allowing control inheritance
        End Sub
        
        Public Sub New(Serializer As WindowsControls.SerializationInfo)
            If Serializer Is Nothing Then Exit Sub
            If Not Serializer.Deserialize(Me) Then
                ' InitializeDefaultValues
            End If
            IsDesignMode = Serializer.IsDesignMode
        End Sub
        
        Private Sub HandleInitialize(ByVal ControlContext As WindowsControls.WindowsControlContext) _
                Implements IWindowsControl.Initialize

            ControlContext.SetControlArrayIndex(Me.IndexINIT)
            Me.IsMultiColumn = Me.Columns > 0
                            
            Dim styles As Long = GetStyles()
            Dim extendedStyles As Long
                
                extendedStyles += If(ControlContext.IsPlacedOnUserControl, 0, WinNativeFormsBASE.GeneralConsts.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY)
                
                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If Appearance = AppearanceConstants.vbAppear3d Then
                        extendedStyles += WinNativeFormsBASE.WS_EX_CLIENTEDGE
                    End If
                End If
                
            Set Me.RootWindowElement = CreateRootWindowElement(ControlContext, "ThunderListBox", vbNullString, styles, extendedStyles)
            Me.RootWindowElement.ActivatePrePostMessages(True)
        End Sub
        
        Private Function GetStyles() As Long
            Dim styles As Long
            styles += ListBoxStyles.LBS_NOTIFY
                styles += If(Me.Sorted, ListBoxStyles.LBS_SORT, 0)
                styles += If(Me.Columns > 0, ListBoxStyles.LBS_MULTICOLUMN Or WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_HSCROLL, WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_VSCROLL)
                styles += If(Me.IntegralHeight = False, ListBoxStyles.LBS_NOINTEGRALHEIGHT, 0)
                styles += If(Me.Style = ListBoxConstants.vbListBoxCheckbox, ListBoxStyles.LBS_OWNERDRAWFIXED Or ListBoxStyles.LBS_HASSTRINGS, 0)

                If Me.Style = ListBoxConstants.vbListBoxStandard Then
                    Select Case Me.MultiSelect
                        Case MultiSelectConstants.vbMultiSelectSimple: styles += ListBoxStyles.LBS_MULTIPLESEL
                        Case MultiSelectConstants.vbMultiSelectExtended: styles += ListBoxStyles.LBS_EXTENDEDSEL
                    End Select
                Else
                    ' FIXME error if MultiSelect is not 0
                End If
                
                If Me.BorderStyle = ControlBorderStyleConstants.vbFixedSingleBorder Then
                    If Appearance = AppearanceConstants.vbAppear3d Then
                    Else
                        styles += WinNativeFormsBASE.GeneralConsts.WindowStyles.WS_BORDER
                    End If
                End If
            
            Return styles
        End Function
        
        Private Sub HandleDestroy() _
                Implements IWindowsControl.Destroy
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
            
            ' disconnect anything that causes a circular reference here
            If OLEDragDropHandler IsNot Nothing Then OLEDragDropHandler.Disconnect()
        End Sub
        
        Private Sub Class_Terminate()
            #If LOG_TERMINATE Then
                Debug.Print CurrentComponentName & "." & CurrentProcedureName
            #End If
        End Sub
        
        Private Sub PostProcessMessage(ByVal Message As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr, ByRef ReturnValue As LongPtr, ByVal PostMessageCookie As Long) _
                Handles RootWindowElement.PostProcessMessage

            Select Case Message
                Case ListBoxMessages.LB_SETTOPINDEX
                    CheckTopIndexChanged()
            End Select
        End Sub
    
        Private Function GetCustomDrawnHeight() As Long
            Dim TextMetrics As WinNativeFormsBASE.TEXTMETRIC = GetFontMetrics()
            Return TextMetrics.TMHeight + TextMetrics.TMExternalLeading
        End Function
        
        Private Sub HandleFontChanged() _
                Handles RootWindowElement.FontChanged
        
            If IsInitializing = False Then
                If Style = ListBoxConstants.vbListBoxCheckbox Then
                    ' for custom drawing we have to manually update the item height as MeasureItem won't be recalled
                    WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, LB_SETITEMHEIGHT, 0, GetCustomDrawnHeight())
                End If
            End If
        End Sub
        
        Private Sub MeasureItem(ByRef Info As WinNativeFormsBASE.MEASUREITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.MeasureItem
 
            ' Careful! This occurs BEFORE the Create event, so the windows font has not yet been set!
            Info.ItemHeight = GetCustomDrawnHeight()
        End Sub
         
        Private Sub DrawItem(ByRef Info As WinNativeFormsBASE.DRAWITEMSTRUCT, ByRef Handled As Boolean) _
                Handles RootWindowElement.DrawItem
 
            If Info.CtlType = WinNativeFormsBASE.OwnerDrawTypes.ODT_LISTBOX And Info.ItemID > -1 Then
                
                Dim itemHeight As Long = Info.RCItem.Bottom - Info.RCItem.Top
                ListBoxImageSize = MaxCheckboxSize * (RootWindowElement.DPI / 96)
                If ListBoxImageSize > itemHeight Then ListBoxImageSize = itemHeight
                
                Dim checkBoxRect As WinNativeFormsBASE.RECT
                With Info.RCItem
                    checkBoxRect.Left = .Left + 1
                    checkBoxRect.Top = .Top + 1
                    checkBoxRect.Right = .Left + ListBoxImageSize - 1
                    checkBoxRect.Bottom = .Bottom - 1
                    
                    Info.RCItem.Left += ListBoxImageSize
                End With

                Dim itemIsChecked As Boolean = IsItemChecked(Info.ItemID)
                
                Dim frameFlags As Long
                frameFlags = WinNativeFormsBASE.DrawFrameTypes.DFCS_FLAT
                frameFlags += WinNativeFormsBASE.DrawFrameTypes.DFCS_BUTTONCHECK
                frameFlags += If(itemIsChecked, WinNativeFormsBASE.DrawFrameTypes.DFCS_CHECKED, 0)
                
                Dim backColor As OLE_COLOR
                Dim textColor As OLE_COLOR
                If Info.ItemState And WinNativeFormsBASE.OwnerDrawState.ODS_DISABLED Then
                    backColor = Me.BackColor
                    textColor = vbGrayText
                    frameFlags += WinNativeFormsBASE.DrawFrameTypes.DFCS_INACTIVE
                ElseIf Info.ItemState And WinNativeFormsBASE.OwnerDrawState.ODS_SELECTED Then
                    backColor = vbHighlight
                    textColor = vbHighlightText
                Else
                    backColor = Me.BackColor
                    textColor = Me.ForeColor
                End If
                
                Dim backBrush As LongPtr = WinNativeFormsBASE.WindowsAPI.GDI32_CreateSolidBrushColor(TranslateColor(backColor))
                WinNativeFormsBASE.WindowsAPI.USER32_FillRectangle(Info.hDC, Info.RCItem, backBrush)
                WinNativeFormsBASE.WindowsAPI.GDI32_DeleteObject(backBrush)
                
                If VisualStyles Then
                    Dim Theme As LongPtr = WinNativeFormsBASE.WindowsAPI.THEME_OpenData(RootWindowElement, "Button")
                    Dim CheckState As Long
                    If Info.ItemState And WinNativeFormsBASE.ODS_DISABLED Then
                        CheckState = If(itemIsChecked, WinNativeFormsBASE.CBS_CHECKEDDISABLED, WinNativeFormsBASE.CBS_UNCHECKEDDISABLED)
                    Else
                        CheckState = If(itemIsChecked, WinNativeFormsBASE.CBS_CHECKEDNORMAL, WinNativeFormsBASE.CBS_UNCHECKEDNORMAL)
                    End If
                    
                    If WinNativeFormsBASE.WindowsAPI.THEME_IsBackgroundPartiallyTransparent(Theme, WinNativeFormsBASE.BP_CHECKBOX, CheckState) Then
                        WinNativeFormsBASE.WindowsAPI.THEME_DrawParentBackground(Info.hWndItem, Info.hDC, checkBoxRect)
                    End If
                    WinNativeFormsBASE.WindowsAPI.THEME_DrawBackground(Theme, Info.hDC, WinNativeFormsBASE.BP_CHECKBOX, CheckState, checkBoxRect, checkBoxRect)
                    WinNativeFormsBASE.WindowsAPI.THEME_CloseData Theme
                Else
                    WinNativeFormsBASE.WindowsAPI.USER32_DrawFrameControl(Info.hDC, checkBoxRect, WinNativeFormsBASE.DFC_BUTTON, frameFlags)
                End If
                                
                Dim itemText As String = Me.List(Info.ItemID)
                
                Dim oldTextColor As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(Info.hDC, TranslateColor(textColor))
                Dim oldBkMode As Long = WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(Info.hDC, 1)
                
                WinNativeFormsBASE.WindowsAPI.GDI32_TextOut(Info.hDC, Info.RCItem.Left + (1 * (RootWindowElement.DPI / 96)), Info.RCItem.Top, itemText)
                WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(Info.hDC, oldBkMode)
                WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(Info.hDC, oldTextColor)
                    
                If Info.ItemState And WinNativeFormsBASE.OwnerDrawState.ODS_FOCUS Then
                    WinNativeFormsBASE.WindowsAPI.USER32_DrawFocusBox(Info.hDC, Info.RCItem)
                End If
            End If
            
        End Sub
        
        Private Sub HandleScroll(ByVal ScrollType As WinNativeFormsBASE.SCROLLNOTIFY, ByVal IsHorizontal As Boolean) _
                Handles RootWindowElement.Scroll
                
            CheckTopIndexChanged()
        End Sub
        
        Private Sub HandleCreate() _
                Handles RootWindowElement.Create
                
            SyncColumns()
            
            If Style = ListBoxConstants.vbListBoxCheckbox Then
                ReDim CheckBoxState(0)
            End If

            ' FIXME could send LB_INITSTORAGE to pre-allocate the storage here
            Dim Item As String
            For Each Item In List_INIT
                AddItem(Item)
            Next
            
            ' FIXME handle ItemData list is longer than List
            Dim ItemData As Long
            Dim ItemDataIndex As Long
            For Each ItemData In ItemData_INIT
                Me.ItemData(ItemDataIndex) = CLngPtr(ItemData)
                ItemDataIndex += 1
            Next
                      
            SyncOLEDropMode()
            
            If IsDesignMode = False Then _DataFieldBinderBase.SetupBindings()
            RaiseEvent Initialize()
            
            IsInitializing = False
        End Sub
        
        Friend Sub SyncRecreate() _
                Handles Style.OnPropertyLet, _
                        MultiSelect.OnPropertyLet, _
                        Sorted.OnPropertyLet, _
                        IntegralHeight.OnPropertyLet
                
            Dim TopIndex As Long = Me.TopIndex
            Dim ListIndex As Long = Me.ListIndex
            Dim ListCount As Long = Me.ListCount

            Dim List() As String
            Dim ItemData() As LongPtr
            Dim ItemCheckedState() As Byte
            ReDim List(ListCount)
            ReDim ItemData(ListCount)
            ReDim ItemCheckedState(ListCount)
            
            Dim index As Long = 0
            While index < ListCount
            	List(index) = Me.List(index)
            	ItemData(index) = Me.ItemData(index)
                ItemCheckedState(index) = Me.IsItemChecked(index)
                index += 1
            Wend
            
            Erase List_INIT ' prevent auto repopulation from the initialization data
            Erase ItemData_INIT
            Erase CheckBoxState
            
            RecreateWindow(GetStyles())
            
            index = 0
            While index < ListCount
                'AddItem(List(index))       ' dont use this as it resets the Checked state
                Dim newItemIndex As Long = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_ADDSTRING, 0, StrPtrSafe(List(index))))
            	Me.ItemData(newItemIndex) = ItemData(index)
                
                If Style = ListBoxConstants.vbListBoxCheckbox Then
                    Me.SetItemCheckedState(newItemIndex, CBool(ItemCheckedState(index)))
                End If
                index += 1
            Wend
                        
            If ListIndex <> -1 Then Me.ListIndex = ListIndex
            Me.TopIndex = TopIndex
        End Sub
        
        Private Sub HandleGetColors(ByVal hdc As LongPtr, ByRef BackBrushOut As LongPtr, ByVal ControlType As ControlTypeConstants) _
                Handles RootWindowElement.GetColors
                
            WinNativeFormsBASE.WindowsAPI.GDI32_SetTextForeColor(hdc, WinNativeFormsBASE.GDI32_TranslateColorFromHDC(Me.ForeColor, hdc))
            WinNativeFormsBASE.WindowsAPI.GDI32_SetBackMode(hdc, WinNativeFormsBASE.BackgroundModes.TRANSPARENT)
            BackBrushOut = Me.CreateBackBrush(Me.BackColor)
        End Sub
        
        Private Sub HandleCommand(ByVal NotificationCode As ListBoxNotifications, _
                                    ByVal Identifier As Integer) _
                Handles RootWindowElement.Command
                
            Select Case NotificationCode
                Case ListBoxNotifications.LBN_SELCHANGE
                    CheckTopIndexChanged()
                    _DataFieldBinderBase.OnDataChanged()
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_SELCANCEL
                    _DataFieldBinderBase.OnDataChanged()
                    RaiseEvent Click()
                Case ListBoxNotifications.LBN_DBLCLK
                    RaiseEvent DblClick()
            End Select
        End Sub
        
        Private Sub HandleWheel(ByVal Delta As Integer, ByVal Horizontal As Boolean) _
                Handles RootWindowElement.MouseWheel
                
            If Horizontal = False Then
                If WheelScrollEvent Then CheckTopIndexChanged()
            End If
        End Sub

        Private Sub HandleGotFocus() _
                Handles RootWindowElement.GotFocus
                
            RaiseEvent GotFocus()
        End Sub

        Private Sub HandleLostFocus() _
                Handles RootWindowElement.LostFocus
                
            RaiseEvent LostFocus()
        End Sub
        
        Private Sub HandleKeyDown(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyDown
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyDown(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
            
            If Style = vbListBoxCheckbox And KeyCode = vbKeySpace Then
                ToggleItemCheckedState(ListIndex)
            End If
        End Sub
        
        Private Sub HandleKeyUp(ByRef KeyCode As VBRUN.KeyCodeConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants) _
                Handles RootWindowElement.KeyUp
                
            Dim KeyCodeInt As Integer = KeyCode
            RaiseEvent KeyUp(KeyCodeInt, CInt(ShiftState))
            KeyCode = KeyCodeInt
        End Sub
        
        Private Sub HandleKeyPress(ByRef Key As Integer) _
                Handles RootWindowElement.KeyPress
                
            RaiseEvent KeyPress(Key)
        End Sub
        
        Private Function GetItemIndexFromXY(ByVal X As Single, ByVal Y As Single) As Long
            Dim point As WinNativeFormsBASE.POINT
            Dim Index As Long
            point.X = (X * RootWindowElement.UnitPixelScale) / Me.ControlContext.GetScaleModePixelsMultiplierX
            point.Y = (Y * RootWindowElement.UnitPixelScale) / Me.ControlContext.GetScaleModePixelsMultiplierY
            WinNativeFormsBASE.WindowsAPI.USER32_ClientPointToScreen(RootWindowElement, point)
            GetItemIndexFromXY = WinNativeFormsBASE.WindowsAPI.USER32_ListBoxIndexFromPoint(RootWindowElement, point, 0)
        End Function
        
        Private Sub HandlePreMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single, _
                                        ByRef SwallowMessage As Boolean) _
                Handles RootWindowElement.PreMouseDown
            
            If OLEDragMode = vbOLEDragAutomatic Then
            	itemIndex = GetItemIndexFromXY(X, Y)
                If itemIndex <> -1 Then
                    ' The list of selected items hasn't yet been updated to reflect the click
                    ' so we only do OLEDrag when we know the click is on the currently selected/focused item
                    ' (VB6 does same)
                    If itemIndex = Me.ListIndex Then
                        Dim mousePoint As POINT
                        WinNativeFormsBASE.GetCursorPos(mousePoint)
                        WinNativeFormsBASE.ScreenToClient(Me.RootWindowElement.Handle, mousePoint)

                        If WinNativeFormsBASE.DragDetect(RootWindowElement.Handle, mousePoint.x And &HFFFF&, mousePoint.y And &HFFFF&) <> 0 Then
                            If Me.MultiSelect Then
                                CommonOLEDrag(Me, GetSelectedItemsAsDelimitedString(), False, False)
                            Else
                                CommonOLEDrag(Me, List(itemIndex), False, False)
                            End If
                            SwallowMessage = True
                        Else
                            MouseDownNeedsManualRelease = True
                        End If
                    End If
                End If
            End If
            
            If Style = ListBoxConstants.vbListBoxCheckbox Then
                Dim itemIndex As Long = GetItemIndexFromXY(X, Y)
                If itemIndex = -1 Then Exit Sub
                Dim clickedOnCheckBoxPart As Boolean = ((X * RootWindowElement.UnitPixelScale) / Me.ControlContext.GetScaleModePixelsMultiplierX) < ListBoxImageSize
                
                If clickedOnCheckBoxPart Then
                    ToggleItemCheckedState(itemIndex)
                Else
                    Dim isNewSelection As Boolean = ListIndex <> itemIndex
                    If isNewSelection = False Then
                        ToggleItemCheckedState(itemIndex)
                    End If
                End If
            End If
        End Sub
        
        Private Function GetSelectedItemsAsDelimitedString(ByRef Delimiter As String = vbCrLf) As String
            Dim count As Long = Me.SelCount
            If count = 0 Then Exit Function
            
            Dim itemIndices() As Long
            ReDim itemIndices(count - 1)
            count = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETSELITEMS, count, VarPtr(itemIndices(0))))

            Dim selIndex As Integer
            For selIndex = 0 To count - 1
                If selIndex > 0 Then GetSelectedItemsAsDelimitedString &= Delimiter
                GetSelectedItemsAsDelimitedString &= List(itemIndices(selIndex))
            Next
        End Function
        
        Private Sub HandleMouseDown(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseDown
                
            RaiseEvent MouseDown(CInt(Button), CInt(ShiftState), X, Y)
            
            If MouseDownNeedsManualRelease = True Then
                MouseDownNeedsManualRelease = False
                WinNativeFormsBASE.ReleaseCapture()
                RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
            End If
        End Sub
        
        Private Sub HandleMouseMove(ByVal Button As VBRUN.MouseButtonConstants, _
                                        ByVal ShiftState As VBRUN.ShiftConstants, _
                                        ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseMove
                
            RaiseEvent MouseMove(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        Private Sub HandleMouseUp(ByVal Button As VBRUN.MouseButtonConstants, _
                                    ByVal ShiftState As VBRUN.ShiftConstants, _
                                    ByVal X As Single, ByVal Y As Single) _
                Handles RootWindowElement.MouseUp
                
            RaiseEvent MouseUp(CInt(Button), CInt(ShiftState), X, Y)
        End Sub
        
        [ Serialize (False) ]
        Public Property Get hWnd() As LongPtr
            If Me.RootWindowElement IsNot Nothing Then
                Me.ControlContext.EnsureFormIsLoaded()
                Return Me.RootWindowElement.Handle
            End If
        End Property
        
        [ Serialize (False) ]
        Public Property Get TopIndex() As Long
            Me.ControlContext.EnsureFormIsLoaded()
            Return CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETTOPINDEX, 0, 0))
        End Property
        
        Private Function CheckTopIndexChanged() As Boolean
            Dim topIndex As Long = Me.TopIndex
            If CachedTopIndex <> topIndex Then
                CachedTopIndex = topIndex
                RaiseEvent Scroll
                Return True
            End If
            Return False
        End Function
    
        [ Serialize (False) ]
        Public Property Let TopIndex(ByVal Value As Long)
            Me.ControlContext.EnsureFormIsLoaded()
            WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETTOPINDEX, Value, 0)
        End Property
        
        [ Serialize (False) ]
        Public Property Get ListIndex() As Long
            Me.ControlContext.EnsureFormIsLoaded()
            Return CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETCURSEL, 0, 0))
        End Property
        
        [ Serialize (False) ]
        Public Property Let ListIndex(ByVal NewValue As Long)
            ' FIXME this is not correct for multi select lists
            Me.ControlContext.EnsureFormIsLoaded()
            If Me.ListIndex <> NewValue Then
                WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETCURSEL, NewValue, 0)
                Me.Refresh
                _DataFieldBinderBase.OnDataChanged()
                RaiseEvent Click()
            End If
        End Property
        
        [ Serialize (False) ]
        Public Property Get Text() As String
            Me.ControlContext.EnsureFormIsLoaded()
            Return Me.List(Me.ListIndex)
        End Property
        
        [ Serialize (False) ]
        Public Property Let Text(ByVal Value As String)
            Me.ControlContext.EnsureFormIsLoaded()
            Me.ListIndex = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, LB_FINDSTRINGEXACT, -1, StrPtr(Value)))
        End Property

        [ Serialize (False) ]
        [ DefaultMember ]
        Public Property Get _Default() As String
            Return Me.Text
        End Property
        
        [ Serialize (False) ]
        [ DefaultMember ]
        Public Property Let _Default(ByVal Value As String)
            Me.Text = Value
        End Property
        
        [ Serialize (False) ]
        Public Property Get SelCount() As Long
            Me.ControlContext.EnsureFormIsLoaded()
            Return CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETSELCOUNT, 0, 0))
        End Property
        
        Public Sub AddItem(ByVal Value As String, Optional ByVal Index As Variant)
            Me.ControlContext.EnsureFormIsLoaded()
            Dim newIndex As Long
            If IsMissing(Index) Then
                newIndex = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_ADDSTRING, 0, StrPtrSafe(Value)))
            Else
                ' FIXME error when Index is out of range
                newIndex = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_INSERTSTRING, Index, StrPtrSafe(Value)))
            End If
            
            If newIndex = ListBoxConsts.LB_ERR Then Err.Raise 5
                
            Me.NewIndex = newIndex
            
            If Style = ListBoxConstants.vbListBoxCheckbox Then
                Dim listCount As Long = Me.ListCount
                ReDim Preserve CheckBoxState(listCount)
                If newIndex < (listCount - 1) Then
                    ' item wasn't added to the end of the list, so shift the checkbox states to match
                    WinNativeFormsBASE.WindowsAPI.KERNEL32_CopyMemory(VarPtr(CheckBoxState(newIndex + 1)), VarPtr(CheckBoxState(newIndex)), (listCount - newIndex - 1))
                    CheckBoxState(newIndex) = False
                End If
            End If
            
            Me.Refresh
        End Sub
        
        Public Sub RemoveItem(ByVal Index As Variant)
            Me.ControlContext.EnsureFormIsLoaded()
            Dim newListCount As Long = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_DELETESTRING, Index, 0))
            If newListCount = ListBoxConsts.LB_ERR Then Err.Raise 5
                
            If Style = ListBoxConstants.vbListBoxCheckbox Then
                If newListCount = 0 Then
                    ReDim Preserve CheckBoxState(0)
                Else
                    Dim oldListCount As Long = newListCount + 1
                    WinNativeFormsBASE.WindowsAPI.KERNEL32_CopyMemory(VarPtr(CheckBoxState(Index)), VarPtr(CheckBoxState(Index + 1)), oldListCount - Index)
                    ReDim Preserve CheckBoxState(newListCount)
                End If
            End If
            
            Me.Refresh
        End Sub
        
        Public Sub Clear()
            Me.ControlContext.EnsureFormIsLoaded()
            WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_RESETCONTENT, 0, 0)
            
            If Style = ListBoxConstants.vbListBoxCheckbox Then
                ReDim Preserve CheckBoxState(0)
            End If
        End Sub

        [ Serialize (False) ]
        Public Property Get List(ByVal Index As Long) As String
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Me.ControlContext.EnsureFormIsLoaded()
            Dim itemLength As Long = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETTEXTLEN, Index, 0))
            Dim outValue As String = WinNativeFormsBASE.WindowsAPI.OLEAUT32_AllocateBSTR(vbNullString, itemLength)
            Dim realLength As Long = CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETTEXT, Index, StrPtr(outValue)))
            If realLength < itemLength Then outValue = VBA.Left(outValue, realLength)  ' for completeness, see docs for LB_GETTEXTLEN
            Return outValue
        End Property
        
        [ Serialize (False) ]
        Public Property Let List(ByVal Index As Long, ByVal Value As String)
            ' FIXME error if out of range
            RemoveItem(Index)
            AddItem(Value, Index)
        End Property
        
        Private Sub RedrawItem(ByVal Index As Long)
            Dim rect As WinNativeFormsBASE.RECT
            WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, LB_GETITEMRECT, Index, VarPtr(rect))
            WinNativeFormsBASE.WindowsAPI.USER32_RedrawRect(Me.RootWindowElement, rect, False)
        End Sub
        
        Private Function IsItemChecked(ByVal Index As Long) As Boolean
            If (IsArrayInitialized(CheckBoxState) = False) OrElse (Index > UBound(CheckBoxState)) Then
                Return False
            End If
            Return CheckBoxState(Index)
        End Function

        Private Sub SetItemCheckedState(ByVal Index As Long, Checked As Boolean)
            If Index > UBound(CheckBoxState) Then
                ReDim Preserve CheckBoxState(Index)
            End If
            
            Dim bChecked As Byte
            If Checked Then bChecked = 255
            
            If CheckBoxState(Index) <> bChecked Then
                CheckBoxState(Index) = bChecked
                RedrawItem(Index)
                If Index <= 32768 Then                      ' FIXME need a new event to handle > 32768 entries here
                    RaiseEvent ItemCheck(CInt(Index))
                End If
            End If
        End Sub
        
        Private Sub ToggleItemCheckedState(ByVal Index As Long)
            If Index > UBound(CheckBoxState) Then
                ReDim Preserve CheckBoxState(Index)
            End If
            CheckBoxState(Index) = Not CheckBoxState(Index)
            RedrawItem(Index)
            If Index <= 32768 Then                      ' FIXME need a new event to handle > 32768 entries here
                RaiseEvent ItemCheck(CInt(Index))
            End If
        End Sub

        [ Serialize (False) ]
        Public Property Get Selected(ByVal Index As Long) As Boolean
            Me.ControlContext.EnsureFormIsLoaded()
            If Style = ListBoxConstants.vbListBoxStandard Then
                Return WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETSEL, Index, 0)
            Else
                Return IsItemChecked(Index)
            End If
        End Property
        
        [ Serialize (False) ]
        Public Property Let Selected(ByVal Index As Long, ByVal NewValue As Boolean)
            Me.ControlContext.EnsureFormIsLoaded()
            If Style = ListBoxConstants.vbListBoxStandard Then
                If Me.MultiSelect = vbMultiSelectNone Then
                    If Selected(Index) <> NewValue Then
                        WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETCURSEL, Index, 0)
                        Me.Refresh
                        _DataFieldBinderBase.OnDataChanged()
                        RaiseEvent Click()
                    End If
                Else
                    If Selected(Index) <> NewValue Then
                        WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETSEL, If(NewValue, 1, 0), Index)
                        Me.Refresh
                        _DataFieldBinderBase.OnDataChanged()
                        RaiseEvent Click()
                    End If
                End If
            Else
                SetItemCheckedState(Index, NewValue)
            End If
        End Property
            
        [ Serialize (False) ]
        Public Property Get ItemData(ByVal Index As Long) As LongPtr
            ' FIXME error if out of range
            ' Note Index is limited to 32767 due to Win95/98/ME support (see docs for LB_GETTEXT)
            ' FIXME In the official matching _ListBox interface, we need to change Index to Integer
            Me.ControlContext.EnsureFormIsLoaded()
            Return WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETITEMDATA, Index, 0)
        End Property
        
        [ Serialize (False) ]
        Public Property Let ItemData(ByVal Index As Long, ByVal Value As LongPtr)
            ' FIXME error if out of range
            Me.ControlContext.EnsureFormIsLoaded()
            WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETITEMDATA, Index, Value)
        End Property
        
        [ Serialize (False) ]
        Public Property Get ListCount() As Long
            Me.ControlContext.EnsureFormIsLoaded()
            Return CLng(WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_GETCOUNT, 0, 0))
        End Property

        Private Sub SyncColumns() _
                Handles Columns.OnPropertyLet
                
            Me.ControlContext.EnsureFormIsLoaded()
            If Me.IsMultiColumn Then
                If Me.Columns = 0 Then Err.Raise 380 ' can only change columns if the LBS_MULTICOLUMN flag was set to start with
                WinNativeFormsBASE.WindowsAPI.USER32_SendMessage(Me.RootWindowElement, ListBoxMessages.LB_SETCOLUMNWIDTH, (Me.PixelsWidth * Me.RootWindowElement.UnitPixelScale) / Columns, 0)
            Else
                If Me.Columns <> 0 Then Err.Raise 380 ' can only change columns if the LBS_MULTICOLUMN flag was set to start with
            End If
        End Sub
        
        Private Sub ColorsChanged() _
                Handles BackColor.OnPropertyLet, _
                        ForeColor.OnPropertyLet
            
            Me.ControlContext.EnsureFormIsLoaded()
            Me.Refresh
        End Sub

        Private Sub OnTouchedFormProperties() _
                Handles BackColor.OnPropertyGet, _
        	            ForeColor.OnPropertyGet, _
                        Style.OnPropertyGet, _
                        BorderStyle.OnPropertyGet, _
                        Sorted.OnPropertyGet, _
                        IntegralHeight.OnPropertyGet, _
                        NewIndex.OnPropertyGet, _
                        NewIndex.OnPropertyLet, _
                        WheelScrollEvent.OnPropertyGet, _
                        WheelScrollEvent.OnPropertyLet, _
                        MultiSelect.OnPropertyGet, _
                        Columns.OnPropertyGet, _
                        MaxCheckboxSize.OnPropertyGet, _
                        MaxCheckboxSize.OnPropertyLet

            Me.ControlContext.EnsureFormIsLoaded()
        End Sub
        
        [ Serialize (False) ]
        Public Property Get Parent() As Object ' As Form  FIXME, needs to work also for UCs
            Return ControlContext.GetForm
        End Property
        
        Private Sub BorderStyleChanged() _  
        	    Handles BorderStyle.OnPropertyLet
                
            SyncBorderStyle(Me)
        End Sub
        
        Private Sub HandleDragOver(ByVal Source As Object, ByVal X As Double, ByVal Y As Double, ByVal State As Long) _
                Handles RootWindowElement.DragOver
            
            If State = 3 Then
                RaiseEvent DragDrop(Source, CSng(X), CSng(Y))
            Else
                RaiseEvent DragOver(Source, CSng(X), CSng(Y), CInt(State))
            End If
        End Sub
        
        Private Sub SyncOLEDropMode() _
                Handles OLEDropMode.OnPropertyLet
                
            BaseSyncOLEDropMode(Me, Me.OLEDropMode, Me.OLEDragDropHandler, False, False)
        End Sub
        
        Public Function SelectedIndices() As Collection
            Return CommonGetSelectedIndices(RootWindowElement.Handle)
        End Function
        
        Private Sub HandleValidate(Cancel As Boolean) _
                Handles RootWindowElement.Validate

            RaiseEvent Validate(Cancel)
        End Sub
        
        Private Sub _DataFieldBinderBase_SetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].SetLiveValue
            On Error Resume Next
            Me.Text = If(IsNull(fieldValue), "", fieldValue)
            If Err.Number <> 0 Then Me.Text = ""
        End Sub
        
        Private Sub _DataFieldBinderBase_GetLiveValue(fieldValue As Variant) Handles [_DataFieldBinderBase].GetLiveValue
            fieldValue = Me.Text
        End Sub
        
        Private Sub _DataFieldBinderBase_GetParent(out As Control) Handles [_DataFieldBinderBase].GetParent
            Set out = Me.Parent
        End Sub
        
    #End Region

End Class