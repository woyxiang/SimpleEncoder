[ InterfaceId ("000000E2-0000-0010-8000-00AA006D2EA4") ]
Interface IDSCConnectionPoint Extends stdole.IUnknown
    Sub OnRequestChange(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant, ByRef out As Long)
    Sub OnRequestCancelled(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant, ByVal int As Long)
    Sub OnRequestAccepted(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant)
    Sub OnBeforeChange(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant)
    Sub OnActionCompleting(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant, ByVal C As Long)
    Sub OnAfterAction(ByVal A As Long, ByVal B As Long, ByVal V1a As Variant, ByVal V1b As Variant, ByVal C As Long)
    Sub Reserved1()        ' this vtable entry might not be required.
    Sub Reserved2()        ' this vtable entry might not be required.
    Sub Reserved3()        ' this vtable entry might not be required.
    Sub Reserved4()        ' this vtable entry might not be required.
    Sub Reserved5()        ' this vtable entry might not be required.
    Sub Reserved6()        ' this vtable entry might not be required.
    Sub Reserved7()        ' this vtable entry might not be required.
    Sub Reserved8()        ' this vtable entry might not be required.
    Sub Reserved9()        ' this vtable entry might not be required.
    Sub Reserved10()        ' this vtable entry might not be required.
    Sub Reserved11()        ' this vtable entry might not be required.
    Sub Reserved12()        ' this vtable entry might not be required.
    Sub Reserved13()        ' this vtable entry might not be required.
    Sub Reserved14()        ' this vtable entry might not be required.
End Interface

    [ InterfaceId ("0000000A-0000-0010-8000-00AA006D2EA4") ]
    '[ DualInterface ]
    Interface IDAOBaseInterface Extends stdole.IDispatch
        [ DispId (10) ]
        /* voffset &H001C*/ Property Get Properties() As stdole.IUnknown ' DAO.Properties
    End Interface
    
    [ InterfaceId ("00000031-0000-0010-8000-00AA006D2EA4") ]
    '[ DualInterface ]
    Interface IDAORecordset Extends IDAOBaseInterface
        [ DispId (101) ]
        /* voffset &H0020*/ Property Get BOF() As Boolean
        [ DispId (102) ]
        /* voffset &H0024*/ Property Get Bookmark() As Byte()
        [ DispId (102) ]
        /* voffset &H0028*/ Property Let Bookmark(ByRef ppsach As Byte())
        [ DispId (103) ]
        /* voffset &H002C*/ Property Get Bookmarkable() As Boolean
        [ DispId (104) ]
        /* voffset &H0030*/ Property Get DateCreated() As Variant
        [ DispId (105) ]
        /* voffset &H0034*/ Property Get EOF() As Boolean
        [ DispId (106) ]
        /* voffset &H0038*/ Property Get Filter() As String
        [ DispId (106) ]
        /* voffset &H003C*/ Property Let Filter(ByVal pbstr As String)
        [ DispId (107) ]
        /* voffset &H0040*/ Property Get Index() As String
        [ DispId (107) ]
        /* voffset &H0044*/ Property Let Index(ByVal pbstr As String)
        [ DispId (108) ]
        /* voffset &H0048*/ Property Get LastModified() As Byte()
        [ DispId (109) ]
        /* voffset &H004C*/ Property Get LastUpdated() As Variant
        [ DispId (110) ]
        /* voffset &H0050*/ Property Get LockEdits() As Boolean
        [ DispId (110) ]
        /* voffset &H0054*/ Property Let LockEdits(ByVal pb As Boolean)
        [ DispId (111) ]
        /* voffset &H0058*/ Property Get Name() As String
        [ DispId (112) ]
        /* voffset &H005C*/ Property Get NoMatch() As Boolean
        [ DispId (113) ]
        /* voffset &H0060*/ Property Get Sort() As String
        [ DispId (113) ]
        /* voffset &H0064*/ Property Let Sort(ByVal pbstr As String)
        [ DispId (114) ]
        /* voffset &H0068*/ Property Get Transactions() As Boolean
        [ DispId (115) ]
        /* voffset &H006C*/ Property Get Type() As Integer
        [ DispId (116) ]
        /* voffset &H0070*/ Property Get RecordCount() As Long
        [ DispId (117) ]
        /* voffset &H0074*/ Property Get Updatable() As Boolean
        [ DispId (118) ]
        /* voffset &H0078*/ Property Get Restartable() As Boolean
        [ DispId (119) ]
        /* voffset &H007C*/ Property Get ValidationText() As String
        [ DispId (120) ]
        /* voffset &H0080*/ Property Get ValidationRule() As String
        [ DispId (121) ]
        /* voffset &H0084*/ Property Get CacheStart() As Byte()
        [ DispId (121) ]
        /* voffset &H0088*/ Property Let CacheStart(ByRef ppsa As Byte())
        [ DispId (122) ]
        /* voffset &H008C*/ Property Get CacheSize() As Long
        [ DispId (122) ]
        /* voffset &H0090*/ Property Let CacheSize(ByVal pl As Long)
        [ DispId (123) ]
        /* voffset &H0094*/ Property Get PercentPosition() As Single
        [ DispId (123) ]
        /* voffset &H0098*/ Property Let PercentPosition(ByVal pd As Single)
        [ DispId (124) ]
        /* voffset &H009C*/ Property Get AbsolutePosition() As Long
        [ DispId (124) ]
        /* voffset &H00A0*/ Property Let AbsolutePosition(ByVal pl As Long)
        [ DispId (125) ]
        /* voffset &H00A4*/ Property Get EditMode() As Integer
        [ DispId (126), Hidden ]
        /* voffset &H00A8*/ Property Get ODBCFetchCount() As Long
        [ DispId (127), Hidden ]
        /* voffset &H00AC*/ Property Get ODBCFetchDelay() As Long
        [ DispId (128), Hidden ]
        /* voffset &H00B0*/ Property Get Parent() As DAODatabase
        [ DispId (0) ]
        /* voffset &H00B4*/ Property Get Fields() As stdole.IUnknown ' DAO.Fields
        [ DispId (130), Restricted ]
        /* voffset &H00B8*/ Property Get Indexes() As stdole.IUnknown ' DAO.Indexes
        [ DispId (131), Restricted ]
        /* voffset &H00BC*/ Sub _30_CancelUpdate()
        [ DispId (132) ]
        /* voffset &H00C0*/ Sub AddNew()
        [ DispId (133) ]
        /* voffset &H00C4*/ Sub Close()
        [ DispId (134) ]
        /* voffset &H00C8*/ Function OpenRecordset(Optional ByVal Type As Variant, Optional ByVal Options As Variant) As DAORecordset
        [ DispId (135) ]
        /* voffset &H00CC*/ Sub Delete()
        [ DispId (136) ]
        /* voffset &H00D0*/ Sub Edit()
        [ DispId (137) ]
        /* voffset &H00D4*/ Sub FindFirst(ByVal Criteria As String)
        [ DispId (138) ]
        /* voffset &H00D8*/ Sub FindLast(ByVal Criteria As String)
        [ DispId (139) ]
        /* voffset &H00DC*/ Sub FindNext(ByVal Criteria As String)
        [ DispId (140) ]
        /* voffset &H00E0*/ Sub FindPrevious(ByVal Criteria As String)
        [ DispId (141) ]
        /* voffset &H00E4*/ Sub MoveFirst()
        [ DispId (142), Restricted ]
        /* voffset &H00E8*/ Sub _30_MoveLast()
        [ DispId (143) ]
        /* voffset &H00EC*/ Sub MoveNext()
        [ DispId (144) ]
        /* voffset &H00F0*/ Sub MovePrevious()
        [ DispId (145) ]
        /* voffset &H00F4*/ Sub Seek(ByVal Comparison As String, ByVal Key1 As Variant, Optional ByVal Key2 As Variant, Optional ByVal Key3 As Variant, Optional ByVal Key4 As Variant, Optional ByVal Key5 As Variant, Optional ByVal Key6 As Variant, Optional ByVal Key7 As Variant, Optional ByVal Key8 As Variant, Optional ByVal Key9 As Variant, Optional ByVal Key10 As Variant, Optional ByVal Key11 As Variant, Optional ByVal Key12 As Variant, Optional ByVal Key13 As Variant)
        [ DispId (146), Restricted ]
        /* voffset &H00F8*/ Sub _30_Update()
        [ DispId (147) ]
        /* voffset &H00FC*/ Function Clone() As DAORecordset
        [ DispId (148) ]
        /* voffset &H0100*/ Sub Requery(Optional ByVal NewQueryDef As Variant)
        [ DispId (149) ]
        /* voffset &H0104*/ Sub Move(ByVal Rows As Long, Optional ByVal StartBookmark As Variant)
        [ DispId (150) ]
        /* voffset &H0108*/ Sub FillCache(Optional ByVal Rows As Variant, Optional ByVal StartBookmark As Variant)
        [ DispId (151), Restricted ]
        /* voffset &H010C*/ Function CreateDynaset(Optional ByVal Options As Variant, Optional ByVal Inconsistent As Variant) As DAORecordset
        [ DispId (152), Restricted ]
        /* voffset &H0110*/ Function CreateSnapshot(Optional ByVal Options As Variant) As DAORecordset
        [ DispId (153) ]
        /* voffset &H0114*/ Function CopyQueryDef() As stdole.IUnknown ' DAO.QueryDef
        [ DispId (154), Restricted ]
        /* voffset &H0118*/ Function ListFields() As DAORecordset
        [ DispId (155), Restricted ]
        /* voffset &H011C*/ Function ListIndexes() As DAORecordset
        [ DispId (156) ]
        /* voffset &H0120*/ Function GetRows(Optional ByVal NumRows As Variant) As Variant
        [ DispId (-8), Hidden ]
        /* voffset &H0124*/ Property Get Collect(ByVal Item As Variant) As Variant
        [ DispId (-8), Hidden ]
        /* voffset &H0128*/ Property Let Collect(ByVal Item As Variant, ByVal pvar As Variant)
        [ DispId (157) ]
        /* voffset &H012C*/ Sub Cancel()
        [ DispId (158) ]
        /* voffset &H0130*/ Function NextRecordset() As Boolean
        [ DispId (159), Hidden ]
        /* voffset &H0134*/ Property Get hStmt() As Long
        [ DispId (160) ]
        /* voffset &H0138*/ Property Get StillExecuting() As Boolean
        [ DispId (161) ]
        /* voffset &H013C*/ Property Get BatchSize() As Long
        [ DispId (161) ]
        /* voffset &H0140*/ Property Let BatchSize(ByVal pl As Long)
        [ DispId (162) ]
        /* voffset &H0144*/ Property Get BatchCollisionCount() As Long
        [ DispId (163) ]
        /* voffset &H0148*/ Property Get BatchCollisions() As Variant
        [ DispId (164) ]
        /* voffset &H014C*/ Property Get Connection() As stdole.IUnknown ' DAO.Connection
        [ DispId (164) ]
        /* voffset &H0150*/ Property Set Connection(ByVal ppCn As stdole.IUnknown /*DAO.Connection*/)
        [ DispId (165) ]
        /* voffset &H0154*/ Property Get RecordStatus() As Integer
        [ DispId (166) ]
        /* voffset &H0158*/ Property Get UpdateOptions() As Long
        [ DispId (166) ]
        /* voffset &H015C*/ Property Let UpdateOptions(ByVal pl As Long)
        [ DispId (167) ]
        /* voffset &H0160*/ Sub CancelUpdate(Optional ByVal UpdateType As Long = 1)
        [ DispId (168) ]
        /* voffset &H0164*/ Sub Update(Optional ByVal UpdateType As Long = 1, Optional ByVal Force As Boolean = False)
        [ DispId (169) ]
        /* voffset &H0168*/ Sub MoveLast(Optional ByVal Options As Long = 0)
    End Interface

CoClass DAORecordset
    [ Default ] Interface IDAORecordset
    [ Default, Source ] Interface IDSCConnectionPoint
End CoClass

[ CoClassId ("00000101-0000-0010-8000-00AA006D2EA4") ]
[ Hidden, COMCreatable ]
[ Description ("DAO 3.0 DBEngine (private)") ]
CoClass DAOPrivDBEngine
    [ Default ] Interface IDAODBEngine
End CoClass

[ CoClassId ("00000100-0000-0010-8000-00AA006D2EA4") ]
[ Hidden, COMCreatable ]
[ Description ("DAO 3.0 DBEngine (private)") ]
CoClass DAODBEngine
    [ Default ] Interface IDAODBEngine
End CoClass

[ CoClassId ("CD7791B9-43FD-42C5-AE42-8DD2811F0419") ]
[ Hidden, COMCreatable ]
[ Description ("DAO 3.0 DBEngine (private)") ]
CoClass DAODBEngineACE
    [ Default ] Interface IDAODBEngine
End CoClass

[ InterfaceId ("00000021-0000-0010-8000-00AA006D2EA4") ]
'[ DualInterface, DispInterface ]
Interface IDAODBEngine Extends stdole.IDispatch
    [ DispId (10) ]
    /* voffset &H001C*/ Property Get Properties() As stdole.IUnknown 'DAO.Properties
    [ DispId (&H60030000) ]
    /* voffset &H0020*/ Property Get Version() As String
    [ DispId (&H60030001) ]
    /* voffset &H0024*/ Property Get IniPath() As String
    [ DispId (&H60030001) ]
    /* voffset &H0028*/ Property Let IniPath(ByVal value As String)
    [ DispId (&H60030003) ]
    /* voffset &H002C*/ Property Let DefaultUser(ByVal value As String)
    [ DispId (&H60030004) ]
    /* voffset &H0030*/ Property Let DefaultPassword(ByVal value As String)
    [ DispId (&H60030005) ]
    /* voffset &H0034*/ Property Get LoginTimeout() As Integer
    [ DispId (&H60030005) ]
    /* voffset &H0038*/ Property Let LoginTimeout(ByVal value As Integer)
    [ DispId (0) ]
    /* voffset &H003C*/ Property Get Workspaces() As stdole.IUnknown ' DAO.Workspaces
    [ DispId (&H60030008) ]
    /* voffset &H0040*/ Property Get Errors() As stdole.IUnknown ' DAO.Errors
    [ DispId (&H60030009) ]
    /* voffset &H0044*/ Sub Idle(Optional ByVal Action As Variant)
    [ DispId (&H6003000A) ]
    /* voffset &H0048*/ Sub CompactDatabase(ByVal SrcName As String, ByVal DstName As String, Optional ByVal DstLocale As Variant, Optional ByVal Options As Variant, Optional ByVal SrcLocale As Variant)
    [ DispId (&H6003000B), Hidden ]
    /* voffset &H004C*/ Sub RepairDatabase(ByVal Name As String)
    [ DispId (&H6003000C) ]
    /* voffset &H0050*/ Sub RegisterDatabase(ByVal Dsn As String, ByVal Driver As String, ByVal Silent As Boolean, ByVal Attributes As String)
    [ DispId (&H6003000D), Restricted ]
    /* voffset &H0054*/ Function _30_CreateWorkspace(ByVal Name As String, ByVal UserName As String, ByVal Password As String) As stdole.IUnknown ' DAO.Workspace
    [ DispId (&H6003000E) ]
    /* voffset &H0058*/ Function OpenDatabase(ByVal Name As String, Optional ByVal Options As Variant, Optional ByVal ReadOnly As Variant, Optional ByVal Connect As Variant) As DAODatabase
    [ DispId (&H6003000F) ]
    /* voffset &H005C*/ Function CreateDatabase(ByVal Name As String, ByVal Locale As String, Optional ByVal Option As Variant) As DAODatabase
    [ DispId (&H60030010), Restricted ]
    /* voffset &H0060*/ Sub FreeLocks()
    [ DispId (&H60030011) ]
    /* voffset &H0064*/ Sub BeginTrans()
    [ DispId (&H60030012) ]
    /* voffset &H0068*/ Sub CommitTrans(Optional ByVal Option As Long = 0)
    [ DispId (&H60030013) ]
    /* voffset &H006C*/ Sub Rollback()
    [ DispId (&H60030014), Restricted ]
    /* voffset &H0070*/ Sub SetDefaultWorkspace(ByVal Name As String, ByVal Password As String)
    [ DispId (&H60030015), Restricted ]
    /* voffset &H0074*/ Sub SetDataAccessOption(ByVal Option As Integer, ByVal Value As Variant)
    [ DispId (&H60030016), Hidden ]
    /* voffset &H0078*/ Function ISAMStats(ByVal StatNum As Long, Optional ByVal Reset As Variant) As Long
    [ DispId (&H60030017) ]
    /* voffset &H007C*/ Property Get SystemDB() As String
    [ DispId (&H60030017) ]
    /* voffset &H0080*/ Property Let SystemDB(ByVal value As String)
    [ DispId (&H60030019) ]
    /* voffset &H0084*/ Function CreateWorkspace(ByVal Name As String, ByVal UserName As String, ByVal Password As String, Optional ByVal UseType As Variant) As stdole.IUnknown ' DAO.Workspace
    [ DispId (&H6003001A) ]
    /* voffset &H0088*/ Function OpenConnection(ByVal Name As String, Optional ByVal Options As Variant, Optional ByVal ReadOnly As Variant, Optional ByVal Connect As Variant) As stdole.IUnknown ' DAO.Connection
    [ DispId (&H6003001B) ]
    /* voffset &H008C*/ Property Get DefaultType() As Long
    [ DispId (&H6003001B) ]
    /* voffset &H0090*/ Property Let DefaultType(ByVal value As Long)
    [ DispId (&H6003001D) ]
    /* voffset &H0094*/ Sub SetOption(ByVal Option As Long, ByVal Value As Variant)
End Interface

[ InterfaceId ("00000071-0000-0010-8000-00AA006D2EA4") ]
'[ DualInterface, DispInterface ]
Interface DAODatabase Extends stdole.IDispatch
    [ DispId (10) ]
    /* voffset &H001C*/ Property Get Properties() As stdole.IUnknown ' DAO.Properties
    [ DispId (&H60030000) ]
    /* voffset &H0020*/ Property Get CollatingOrder() As Long
    [ DispId (&H60030001) ]
    /* voffset &H0024*/ Property Get Connect() As String
    [ DispId (&H60030002) ]
    /* voffset &H0028*/ Property Get Name() As String
    [ DispId (&H60030003) ]
    /* voffset &H002C*/ Property Get QueryTimeout() As Integer
    [ DispId (&H60030003) ]
    /* voffset &H0030*/ Property Let QueryTimeout(ByVal value As Integer)
    [ DispId (&H60030005) ]
    /* voffset &H0034*/ Property Get Transactions() As Boolean
    [ DispId (&H60030006) ]
    /* voffset &H0038*/ Property Get Updatable() As Boolean
    [ DispId (&H60030007) ]
    /* voffset &H003C*/ Property Get Version() As String
    [ DispId (&H60030008) ]
    /* voffset &H0040*/ Property Get RecordsAffected() As Long
    [ DispId (0) ]
    /* voffset &H0044*/ Property Get TableDefs() As stdole.IUnknown ' DAO.TableDefs
    [ DispId (&H6003000A) ]
    /* voffset &H0048*/ Property Get QueryDefs() As stdole.IUnknown ' DAO.QueryDefs
    [ DispId (&H6003000B) ]
    /* voffset &H004C*/ Property Get Relations() As stdole.IUnknown ' DAO.Relations
    [ DispId (&H6003000C) ]
    /* voffset &H0050*/ Property Get Containers() As stdole.IUnknown ' DAO.Containers
    [ DispId (&H6003000D) ]
    /* voffset &H0054*/ Property Get Recordsets() As stdole.IUnknown ' DAO.Recordsets
    [ DispId (&H6003000E) ]
    /* voffset &H0058*/ Sub Close()
    [ DispId (&H6003000F) ]
    /* voffset &H005C*/ Sub Execute(ByVal Query As String, Optional ByVal Options As Variant)
    [ DispId (&H60030010), Restricted ]
    /* voffset &H0060*/ Function _30_OpenRecordset(ByVal Name As String, Optional ByVal Type As Variant, Optional ByVal Options As Variant) As DAORecordset
    [ DispId (&H60030011) ]
    /* voffset &H0064*/ Function CreateProperty(Optional ByVal Name As Variant, Optional ByVal Type As Variant, Optional ByVal Value As Variant, Optional ByVal DDL As Variant) As stdole.IUnknown ' DAO.Property
    [ DispId (&H60030012) ]
    /* voffset &H0068*/ Function CreateRelation(Optional ByVal Name As Variant, Optional ByVal Table As Variant, Optional ByVal ForeignTable As Variant, Optional ByVal Attributes As Variant) As stdole.IUnknown ' DAO.Relation
    [ DispId (&H60030013) ]
    /* voffset &H006C*/ Function CreateTableDef(Optional ByVal Name As Variant, Optional ByVal Attributes As Variant, Optional ByVal SourceTableName As Variant, Optional ByVal Connect As Variant) As stdole.IUnknown ' DAO.TableDef
    [ DispId (&H60030014), Restricted ]
    /* voffset &H0070*/ Sub BeginTrans()
    [ DispId (&H60030015), Restricted ]
    /* voffset &H0074*/ Sub CommitTrans(Optional ByVal Options As Long = 0)
    [ DispId (&H60030016), Restricted ]
    /* voffset &H0078*/ Sub Rollback()
    [ DispId (&H60030017), Restricted ]
    /* voffset &H007C*/ Function CreateDynaset(ByVal Name As String, Optional ByVal Options As Variant, Optional ByVal Inconsistent As Variant) As DAORecordset
    [ DispId (&H60030018) ]
    /* voffset &H0080*/ Function CreateQueryDef(Optional ByVal Name As Variant, Optional ByVal SQLText As Variant) As stdole.IUnknown ' DAO.QueryDef
    [ DispId (&H60030019), Restricted ]
    /* voffset &H0084*/ Function CreateSnapshot(ByVal Source As String, Optional ByVal Options As Variant) As DAORecordset
    [ DispId (&H6003001A), Restricted ]
    /* voffset &H0088*/ Sub DeleteQueryDef(ByVal Name As String)
    [ DispId (&H6003001B), Restricted ]
    /* voffset &H008C*/ Function ExecuteSQL(ByVal SQL As String) As Long
    [ DispId (&H6003001C), Restricted ]
    /* voffset &H0090*/ Function ListFields(ByVal Name As String) As DAORecordset
    [ DispId (&H6003001D), Restricted ]
    /* voffset &H0094*/ Function ListTables() As DAORecordset
    [ DispId (&H6003001E), Restricted ]
    /* voffset &H0098*/ Function OpenQueryDef(ByVal Name As String) As stdole.IUnknown ' DAO.QueryDef
    [ DispId (&H6003001F), Restricted ]
    /* voffset &H009C*/ Function OpenTable(ByVal Name As String, Optional ByVal Options As Variant) As DAORecordset
    [ DispId (&H60030020) ]
    /* voffset &H00A0*/ Property Get ReplicaID() As String
    [ DispId (&H60030021) ]
    /* voffset &H00A4*/ Property Get DesignMasterID() As String
    [ DispId (&H60030021) ]
    /* voffset &H00A8*/ Property Let DesignMasterID(ByVal value As String)
    [ DispId (&H60030023) ]
    /* voffset &H00AC*/ Sub Synchronize(ByVal DbPathName As String, Optional ByVal ExchangeType As Variant)
    [ DispId (&H60030024) ]
    /* voffset &H00B0*/ Sub MakeReplica(ByVal PathName As String, ByVal Description As String, Optional ByVal Options As Variant)
    [ DispId (&H60030001) ]
    /* voffset &H00B4*/ Property Let Connect(ByVal value As String)
    [ DispId (&H60030026) ]
    /* voffset &H00B8*/ Sub NewPassword(ByVal bstrOld As String, ByVal bstrNew As String)
    [ DispId (&H60030027) ]
    /* voffset &H00BC*/ Function OpenRecordset(ByVal Name As String, Optional ByVal Type As Variant, Optional ByVal Options As Variant, Optional ByVal LockEdit As Variant) As DAORecordset
    [ DispId (&H60030028) ]
    /* voffset &H00C0*/ Property Get Connection() As stdole.IUnknown ' DAO.Connection
    [ DispId (&H60030029) ]
    /* voffset &H00C4*/ Sub PopulatePartial(ByVal DbPathName As String)
End Interface

[ CoClassId ("00000104-0000-0010-8000-00AA006D2EA4") ]
[ COMCreatable ]
CoClass DAOField
    [ Default ] Interface IDAOField
End CoClass

[ InterfaceId ("00000051-0000-0010-8000-00AA006D2EA4") ]
'[ DualInterface, DispInterface ]
Interface IDAOField Extends stdole.IDispatch
    [ DispId (10) ]
    /* voffset &H001C*/ Property Get Properties() As stdole.IUnknown ' DAO.Properties
    [ DispId (&H60030000) ]
    /* voffset &H0020*/ Property Get CollatingOrder() As Long
    [ DispId (&H60030001) ]
    /* voffset &H0024*/ Property Get Type() As Integer
    [ DispId (&H60030001) ]
    /* voffset &H0028*/ Property Let Type(ByVal value As Integer)
    [ DispId (&H60030003) ]
    /* voffset &H002C*/ Property Get Name() As String
    [ DispId (&H60030003) ]
    /* voffset &H0030*/ Property Let Name(ByVal value As String)
    [ DispId (&H60030005) ]
    /* voffset &H0034*/ Property Get Size() As Long
    [ DispId (&H60030005) ]
    /* voffset &H0038*/ Property Let Size(ByVal value As Long)
    [ DispId (&H60030007) ]
    /* voffset &H003C*/ Property Get SourceField() As String
    [ DispId (&H60030008) ]
    /* voffset &H0040*/ Property Get SourceTable() As String
    [ DispId (0) ]
    /* voffset &H0044*/ Property Get Value() As Variant
    [ DispId (0) ]
    /* voffset &H0048*/ Property Let Value(ByVal value As Variant)
    [ DispId (&H6003000B) ]
    /* voffset &H004C*/ Property Get Attributes() As Long
    [ DispId (&H6003000B) ]
    /* voffset &H0050*/ Property Let Attributes(ByVal value As Long)
    [ DispId (&H6003000D) ]
    /* voffset &H0054*/ Property Get OrdinalPosition() As Integer
    [ DispId (&H6003000D) ]
    /* voffset &H0058*/ Property Let OrdinalPosition(ByVal value As Integer)
    [ DispId (&H6003000F) ]
    /* voffset &H005C*/ Property Get ValidationText() As String
    [ DispId (&H6003000F) ]
    /* voffset &H0060*/ Property Let ValidationText(ByVal value As String)
    [ DispId (&H60030011) ]
    /* voffset &H0064*/ Property Get ValidateOnSet() As Boolean
    [ DispId (&H60030011) ]
    /* voffset &H0068*/ Property Let ValidateOnSet(ByVal value As Boolean)
    [ DispId (&H60030013) ]
    /* voffset &H006C*/ Property Get ValidationRule() As String
    [ DispId (&H60030013) ]
    /* voffset &H0070*/ Property Let ValidationRule(ByVal value As String)
    [ DispId (&H60030015) ]
    /* voffset &H0074*/ Property Get DefaultValue() As Variant
    [ DispId (&H60030015) ]
    /* voffset &H0078*/ Property Let DefaultValue(ByVal value As Variant)
    [ DispId (&H60030017) ]
    /* voffset &H007C*/ Property Get Required() As Boolean
    [ DispId (&H60030017) ]
    /* voffset &H0080*/ Property Let Required(ByVal value As Boolean)
    [ DispId (&H60030019) ]
    /* voffset &H0084*/ Property Get AllowZeroLength() As Boolean
    [ DispId (&H60030019) ]
    /* voffset &H0088*/ Property Let AllowZeroLength(ByVal value As Boolean)
    [ DispId (&H6003001B) ]
    /* voffset &H008C*/ Property Get DataUpdatable() As Boolean
    [ DispId (&H6003001C) ]
    /* voffset &H0090*/ Property Get ForeignName() As String
    [ DispId (&H6003001C) ]
    /* voffset &H0094*/ Property Let ForeignName(ByVal value As String)
    [ DispId (&H6003001E) ]
    /* voffset &H0098*/ Sub AppendChunk(ByVal Val As Variant)
    [ DispId (&H6003001F) ]
    /* voffset &H009C*/ Function GetChunk(ByVal Offset As Long, ByVal Bytes As Long) As Variant
    [ DispId (&H60030020), Restricted ]
    /* voffset &H00A0*/ Function _30_FieldSize() As Long
    [ DispId (&H60030021) ]
    /* voffset &H00A4*/ Function CreateProperty(Optional ByVal Name As Variant, Optional ByVal Type As Variant, Optional ByVal Value As Variant, Optional ByVal DDL As Variant) As stdole.IUnknown ' DAO.Property
    [ DispId (&H60030022), Hidden ]
    /* voffset &H00A8*/ Property Get CollectionIndex() As Integer
    [ DispId (&H60030023) ]
    /* voffset &H00AC*/ Property Get OriginalValue() As Variant
    [ DispId (&H60030024) ]
    /* voffset &H00B0*/ Property Get VisibleValue() As Variant
    [ DispId (&H60030025) ]
    /* voffset &H00B4*/ Property Get FieldSize() As Long
End Interface

[ InterfaceId ("00000039-0000-0010-8000-00AA006D2EA4") ]
'[ DualInterface, DispInterface ]
Private Interface DAOWorkspace Extends stdole.IDispatch
    [ DispId (10) ]
    /* voffset &H001C*/ Property Get Properties() As stdole.IUnknown ' DAO.Properties
    [ DispId (&H60030000) ]
    /* voffset &H0020*/ Property Get Name() As String
    [ DispId (&H60030000) ]
    /* voffset &H0024*/ Property Let Name(ByVal value As String)
    [ DispId (&H60030002) ]
    /* voffset &H0028*/ Property Get UserName() As String
    [ DispId (&H60030003), Restricted ]
    /* voffset &H002C*/ Property Let _30_UserName(ByVal value As String)
    [ DispId (&H60030004), Restricted ]
    /* voffset &H0030*/ Property Let _30_Password(ByVal value As String)
    [ DispId (&H60030005) ]
    /* voffset &H0034*/ Property Get IsolateODBCTrans() As Integer
    [ DispId (&H60030005) ]
    /* voffset &H0038*/ Property Let IsolateODBCTrans(ByVal value As Integer)
    [ DispId (0) ]
    /* voffset &H003C*/ Property Get Databases() As stdole.IUnknown ' DAO.Databases
    [ DispId (&H60030008) ]
    /* voffset &H0040*/ Property Get Users() As stdole.IUnknown ' DAO.Users
    [ DispId (&H60030009) ]
    /* voffset &H0044*/ Property Get Groups() As stdole.IUnknown ' DAO.Groups
    [ DispId (&H6003000A) ]
    /* voffset &H0048*/ Sub BeginTrans()
    [ DispId (&H6003000B) ]
    /* voffset &H004C*/ Sub CommitTrans(Optional ByVal Options As Long = 0)
    [ DispId (&H6003000C) ]
    /* voffset &H0050*/ Sub Close()
    [ DispId (&H6003000D) ]
    /* voffset &H0054*/ Sub Rollback()
    [ DispId (&H6003000E) ]
    /* voffset &H0058*/ Function OpenDatabase(ByVal Name As String, Optional ByVal Options As Variant, Optional ByVal ReadOnly As Variant, Optional ByVal Connect As Variant) As DAODatabase
    [ DispId (&H6003000F) ]
    /* voffset &H005C*/ Function CreateDatabase(ByVal Name As String, ByVal Connect As String, Optional ByVal Option As Variant) As DAODatabase
    [ DispId (&H60030010) ]
    /* voffset &H0060*/ Function CreateUser(Optional ByVal Name As Variant, Optional ByVal PID As Variant, Optional ByVal Password As Variant) As stdole.IUnknown ' DAO.User
    [ DispId (&H60030011) ]
    /* voffset &H0064*/ Function CreateGroup(Optional ByVal Name As Variant, Optional ByVal PID As Variant) As stdole.IUnknown ' DAO.Group
    [ DispId (&H60030012) ]
    /* voffset &H0068*/ Function OpenConnection(ByVal Name As String, Optional ByVal Options As Variant, Optional ByVal ReadOnly As Variant, Optional ByVal Connect As Variant) As stdole.IUnknown ' DAO.Connection
    [ DispId (&H60030013) ]
    /* voffset &H006C*/ Property Get LoginTimeout() As Long
    [ DispId (&H60030013) ]
    /* voffset &H0070*/ Property Let LoginTimeout(ByVal value As Long)
    [ DispId (&H60030015) ]
    /* voffset &H0074*/ Property Get DefaultCursorDriver() As Long
    [ DispId (&H60030015) ]
    /* voffset &H0078*/ Property Let DefaultCursorDriver(ByVal value As Long)
    [ DispId (&H60030017), Hidden ]
    /* voffset &H007C*/ Property Get hEnv() As Long
    [ DispId (&H60030018) ]
    /* voffset &H0080*/ Property Get Type() As Long
    [ DispId (&H60030019) ]
    /* voffset &H0084*/ Property Get Connections() As stdole.IUnknown ' DAO.Connections
End Interface