' FIXME We need an atribute for making this class REQUIRE qualification, to avoid conflicts
Private Module WindowsAPI
   
    Public DeclareWide PtrSafe Function SetWindowTextW Lib "user32" (ByVal hWnd As LongPtr, ByVal Text As String) As Long
    Public DeclareWide PtrSafe Function GetWindowTextLengthW Lib "user32" (ByVal hWnd As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetWindowTextW Lib "user32" (ByVal hWnd As LongPtr, ByVal Text As String, ByVal TextLen As Long) As Long
    Public DeclareWide PtrSafe Function SendMessageW Lib "user32" (ByVal HWnd As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function SetWindowLongW Lib "user32" (ByVal HWnd As LongPtr, ByVal Index As Long, ByVal Value As Long) As Long
    Public DeclareWide PtrSafe Function GetWindowLongW Lib "user32" (ByVal HWnd As LongPtr, ByVal Index As Long) As Long
    Public DeclareWide PtrSafe Function GetClientRect Lib "user32" (ByVal hWnd As LongPtr, ByRef outRect As RECT) As Long
    Public DeclareWide PtrSafe Function EnableWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal bEnable As Long) As Long
    Public DeclareWide PtrSafe Function GetWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal uCmd As Long) As LongPtr
    Public DeclareWide PtrSafe Function SetFocus Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function RedrawWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal lprcUpdate As LongPtr, ByVal hrgnUpdate As LongPtr, ByVal flags As RedrawFlags) As Long
    Public DeclareWide PtrSafe Function ShowWindow Lib "user32" (ByVal hWnd As LongPtr, ByVal nCmdShow As Long) As Long
    Public DeclareWide PtrSafe Function GetParent Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function FillRect Lib "user32" (ByVal hdc As LongPtr, ByRef rect As RECT, ByVal brush As LongPtr) As Long
    Public DeclareWide PtrSafe Function DrawFocusRect Lib "user32" (ByVal hdc As LongPtr, ByRef rect As RECT) As Long
    Public DeclareWide PtrSafe Function GetCapture Lib "user32" () As LongPtr
    Public DeclareWide PtrSafe Function GetDC Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function ReleaseDC Lib "user32" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetScrollInfo Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As SCROLLTYPE, ByRef lpsi As SCROLLINFO) As Long
    Public DeclareWide PtrSafe Function SetScrollInfo Lib "user32" (ByVal hWnd As LongPtr, ByVal nBar As SCROLLTYPE, ByRef lpsi As SCROLLINFO, ByVal redraw As Long) As Long
    Public DeclareWide PtrSafe Function EnableScrollBar Lib "user32" (ByVal hWnd As LongPtr, ByVal wSBflags As SCROLLTYPE, ByVal wArrows As Long) As Long
    Public DeclareWide PtrSafe Function DrawFrameControl Lib "user32" (ByVal hDC As LongPtr, ByRef outRect As RECT, ByVal Type As Long, ByVal InitialState As Long) As Long
    Public DeclareWide PtrSafe Function ClientToScreen Lib "user32" (ByVal hWnd As LongPtr, ByRef point As POINT) As Long
    Public DeclareWide PtrSafe Function InvalidateRect Lib "user32" (ByVal hWnd As LongPtr, ByRef lpRect As RECT, ByVal bErase As Long) As Long
    Public DeclareWide PtrSafe Function GetComboBoxInfo Lib "user32" (ByVal hWnd As LongPtr, ByRef CBI As COMBOBOXINFO) As Long
    Public DeclareWide PtrSafe Function GetWindowRect Lib "user32" (ByVal hWnd As LongPtr, ByRef rect As RECT) As Long
    Public DeclareWide PtrSafe Function ScreenToClient Lib "user32" (ByVal hWnd As LongPtr, ByRef lpPoint As POINT) As Long
    Public DeclareWide PtrSafe Function GetWindowPlacement Lib "user32" (ByVal hWnd As LongPtr, ByRef lpwndpl As WINDOWPLACEMENT) As Long
    Public DeclareWide PtrSafe Function SetWindowPlacement Lib "user32" (ByVal hWnd As LongPtr, ByRef lpwndpl As WINDOWPLACEMENT) As Long
    Public DeclareWide PtrSafe Function GetSysColorBrush Lib "user32" (ByVal nIndex As Long) As LongPtr
    Public DeclareWide PtrSafe Function SetCapture Lib "user32" (ByVal hWnd As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function ReleaseCapture Lib "user32" () As LongPtr
    Public DeclareWide PtrSafe Function DrawEdge Lib "user32" (ByVal hdc As LongPtr, ByRef rect As WinNativeFormsBASE.RECT, ByVal edge As Long, ByVal grfFlags As Long) As Long
    Public DeclareWide PtrSafe Function SetLayeredWindowAttributes Lib "user32" (ByVal hwnd As LongPtr, ByVal crColor As Long, ByVal nAlpha As Byte, ByVal dwFlags As Long) As Long
    Public DeclareWide PtrSafe Function GetActiveWindow Lib "user32" () As LongPtr
    Public DeclareWide PtrSafe Function SetWindowPos Lib "user32" (ByVal hWnd As LongPtr, ByVal hWndInsertAfter As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
    Public DeclareWide PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
    Public DeclareWide PtrSafe Function DragDetect Lib "user32" (ByVal hWnd As LongPtr, ByVal PX As Integer, ByVal PY As Integer) As Long
    Public DeclareWide PtrSafe Function GetCursorPos Lib "user32" (ByRef lpPoint As WinNativeFormsBASE.POINT) As Long
    Public DeclareWide PtrSafe Function GetAsyncKeyState Lib "user32" (ByVal VKey As Long) As Integer
    Public DeclareWide PtrSafe Function lstrcmpiW Lib "kernel32" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    Public DeclareWide PtrSafe Function lstrcmpW Lib "kernel32" (ByVal lpString1 As String, ByVal lpString2 As String) As Long
    
    Public DeclareWide PtrSafe Function DoDragDrop Lib "ole32" (ByVal pDataObj As WinNativeFormsBASE.IDataObject, ByVal pDropSource As WinNativeFormsBASE.IDropSource, ByVal dwOKEffects As Long, pdwEffect As Long) As Long

    Public DeclareWide PtrSafe Function CreateFontW Lib "gdi32" (ByVal cHeight As Long, ByVal cWidth As Long, ByVal cEscapement As Long, ByVal cOrientation As Long, ByVal cWeight As Long, ByVal bItalic As Long, ByVal bUnderline As Long, ByVal bStrikeOut As Long, ByVal iCharSet As Long, ByVal iOutPrecision As Long, ByVal iClipPrecision As Long, ByVal iQuality As Long, ByVal iPitchAndFamily As Long, ByVal pszFaceName As String) As LongPtr
    Public DeclareWide PtrSafe Function SetTextColor Lib "gdi32" (ByVal HDC As LongPtr, ByVal Color As Long) As Long
    Public DeclareWide PtrSafe Function SetBkColor Lib "gdi32" (ByVal HDC As LongPtr, ByVal Color As Long) As Long
    Public DeclareWide PtrSafe Function SetBkMode Lib "gdi32" (ByVal HDC As LongPtr, ByVal Mode As Long) As Long
    Public DeclareWide PtrSafe Function CreateSolidBrush Lib "gdi32" (ByVal Color As Long) As LongPtr
    Public DeclareWide PtrSafe Function DeleteObject Lib "gdi32" (ByVal handle As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetCurrentObject Lib "gdi32" (ByVal HDC As LongPtr, ByVal Type As WindowGDIObjectTypes) As LongPtr
    Public DeclareWide PtrSafe Function CreateFontIndirectW Lib "gdi32" (ByRef lpLogFont As LOGFONT) As LongPtr
    Public DeclareWide PtrSafe Function GetObjectW Lib "gdi32" (ByVal hObject As LongPtr, ByVal nCount As Long, ByRef lpObject As Any) As Long
    Public DeclareWide PtrSafe Function GetTextMetricsW Lib "gdi32" (ByVal HDC As LongPtr, ByRef lptm As TEXTMETRIC) As Long
    Public DeclareWide PtrSafe Function TextOutW Lib "gdi32" (ByVal HDC As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal lpString As String, ByVal StringLen As Long) As Long
    Public DeclareWide PtrSafe Function CreateCompatibleDC Lib "gdi32" (ByVal hdc As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function CreateCompatibleBitmap Lib "gdi32" (ByVal hdc As LongPtr, ByVal cx As Long, ByVal cy As Long) As LongPtr
    Public DeclareWide PtrSafe Function DeleteDC Lib "gdi32" (ByVal hDC As LongPtr) As Long
    Public DeclareWide PtrSafe Function SelectObject Lib "gdi32" (ByVal hDC As LongPtr, ByVal object As LongPtr) As LongPtr
    Public DeclareWide PtrSafe Function BitBlt Lib "gdi32" (ByVal hDC As LongPtr, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal hdcSrc As LongPtr, ByVal x1 As Long, ByVal y1 As Long, ByVal ROP As Long) As Long
    Public DeclareWide PtrSafe Function GetDeviceCaps Lib "gdi32" (ByVal hDC As LongPtr, ByVal index As Long) As Long
    Public DeclareWide PtrSafe Function SetStretchBltMode Lib "gdi32" (ByVal hdc As LongPtr, ByVal nStretchMode As Long) As Long
    Public DeclareWide PtrSafe Function SetBrushOrgEx Lib "gdi32" (ByVal hDC As LongPtr, ByVal nXOrg As Long, ByVal nYOrg As Long, ByVal lppt As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetClipBox Lib "gdi32" (ByVal hDC As LongPtr, ByRef lprect As RECT) As Long
    Public DeclareWide PtrSafe Function CreateRectRgn Lib "gdi32" (ByVal x1 As Long, ByVal y1 As Long, ByVal x2 As Long, ByVal y2 As Long) As LongPtr
    Public DeclareWide PtrSafe Function SelectClipRgn Lib "gdi32" (ByVal hdc As LongPtr, ByVal hrgn As LongPtr) As Long
    Public DeclareWide PtrSafe Function GetTextExtentPointW Lib "gdi32" (ByVal hDc As LongPtr, ByVal lpString As String, ByVal c As Long, ByRef lpsz As WinNativeFormsBASE.SIZE) As Long
    Public DeclareWide PtrSafe Function TextOutW Lib "gdi32" (ByVal HDC As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal lpString As LongPtr, ByVal StringLen As Long) As Long
    Public DeclareWide PtrSafe Function SetTextAlign Lib "gdi32" (ByVal HDC As LongPtr, ByVal align As Long) As Long
    Public DeclareWide PtrSafe Function SetTextCharacterExtra Lib "gdi32" (ByVal HDC As LongPtr, ByVal extra As Long) As Long
    Public DeclareWide PtrSafe Function SetTextJustification Lib "gdi32" (ByVal HDC As LongPtr, ByVal extra As Long, ByVal count As Long) As Long
    Public DeclareWide PtrSafe Function SetMapMode Lib "gdi32" (ByVal HDC As LongPtr, ByVal iMode As Long) As Long
    Public DeclareWide PtrSafe Function ExtTextOutW Lib "gdi32" (ByVal HDC As LongPtr, ByVal X As Long, ByVal Y As Long, ByVal options As Long, ByRef rect As WinNativeFormsBASE.RECT, ByVal lpString As String, ByVal StringLen As Long, ByVal lpDx As LongPtr) As Long
    Public DeclareWide PtrSafe Function Rectangle Lib "gdi32" (ByVal hdc As LongPtr, ByVal left As Long, ByVal top As Long, ByVal right As Long, ByVal bottom As Long) As Long
    Public DeclareWide PtrSafe Function GetStockObject Lib "gdi32" (ByVal i As Long) As LongPtr

#If WIN64 Then
    ' pointXY passed in a single register on x64
    Public DeclareWide PtrSafe Function LBItemFromPt Lib "comctl32" (ByVal hWnd As LongPtr, ByVal pointXY As LongLong, ByVal AutoScroll As Long) As Long
#Else
    Public DeclareWide PtrSafe Function LBItemFromPt Lib "comctl32" (ByVal hWnd As LongPtr, ByVal pointX As Long, ByVal pointY As Long, ByVal AutoScroll As Long) As Long
#End If

    Public DeclareWide PtrSafe Function OpenThemeData Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal pszClassList As String) As LongPtr
    Public DeclareWide PtrSafe Function CloseThemeData Lib "uxtheme" (ByVal Theme As LongPtr) As Long
    Public DeclareWide PtrSafe Function IsThemeBackgroundPartiallyTransparent Lib "uxtheme" (ByVal Theme As LongPtr, iPartId As Long, iStateId As Long) As Long
    Public DeclareWide PtrSafe Function DrawThemeParentBackground Lib "uxtheme" (ByVal hWnd As LongPtr, ByVal hDC As LongPtr, ByRef pRect As RECT) As Long
    Public DeclareWide PtrSafe Function DrawThemeBackground Lib "uxtheme" (ByVal Theme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByRef pRect As RECT, ByRef pClipRect As RECT) As Long

    Public DeclareWide PtrSafe Sub RtlMoveMemory Lib "kernel32" (ByVal lpDest As LongPtr, ByVal lpSource As LongPtr, ByVal Size As LongPtr)
    Public DeclareWide PtrSafe Function MulDiv Lib "kernel32" (ByVal nNumber As Long, ByVal nNumerator As Long, ByVal nDenominator As Long) As Long
    Public DeclareWide PtrSafe Function GetVolumeInformationW Lib "kernel32" (ByVal lpRootPathName As String, ByVal lpVolumeNameBuffer As String, ByVal nVolumeNameSize As Long, ByVal lpVolumeSerialNumber As LongPtr, ByVal lpMaximumComponentLength As LongPtr, ByVal lpFileSystemFlags As LongPtr, ByVal lpFileSystemNameBuffer As String, ByVal nFileSystemNameSize As Long) As Long
    Public DeclareWide PtrSafe Function GetDriveTypeW Lib "kernel32" (ByVal lpRootPathName As String) As DriveType

    Public DeclareWide PtrSafe Function SysAllocStringLen Lib "oleaut32" (ByVal CopyFrom As String, ByVal Length As Long) As String
    Public DeclareWide PtrSafe Function SysAllocString Lib "oleaut32" (ByVal CopyFrom As LongPtr) As String

    Public DeclareWide PtrSafe Function WNetGetConnectionW Lib "mpr" (ByVal lpLocalName As String, ByVal lpRemoteName As String, ByRef lpnLength As Long) As Long

    ' -----------------------------------------------------------------------------------------------------------------------------------------
    
    Const errInvalidArgument As Long = 5
    Public Const S_FALSE As Long = 1
    Public Const E_NOTIMPL As Long = &H80004001
    
    Public Const STREAM_SEEK_SET As Long = 0
    Public Const STREAM_SEEK_CUR As Long = 1
    Public Const STREAM_SEEK_END As Long = 2
    
    Public Const STGM_READ As Long = 0
    Public Const STGM_CREATE As Long = &H1000
    Public Const STGM_READWRITE As Long = &H2
    Public Const STGM_SHARE_EXCLUSIVE As Long = &H10

    Public Const OLEIVERB_PRIMARY As Long = 0
    Public Const OLEIVERB_SHOW As Long = -1
    Public Const OLEIVERB_HIDE As Long = -3
    Public Const OLEIVERB_INPLACEACTIVATE As Long = -4
    Public Const OLEIVERB_UIACTIVATE As Long = -5

    Public Const STATFLAG_NONAME As Long = 1
        
    ' FIXME all these would be best with an [ Inlined ] attribute
    ' FIXME all these need much better error checking and handling!
    
    Public Function USER32_GetWindowText(ByRef Element As WindowsControls.WindowElement) As String
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Dim hwnd As LongPtr = Element.Handle
        Dim itemLength As Long = CLng(SendMessageW(hwnd, WM_GETTEXTLENGTH, 0, 0))
        Dim outValue As String = WindowsAPI.OLEAUT32_AllocateBSTR(vbNullString, itemLength)
        Dim realLength As Long = CLng(SendMessageW(hwnd, WM_GETTEXT, itemLength + 1, StrPtr(outValue)))
        If realLength < itemLength Then outValue = VBA.Left(outValue, realLength) ' for completeness, see docs for WM_GETTEXTLENGTH
        Return outValue
    End Function
    
    Public Function USER32_GetScrollInfo(ByRef Element As WindowsControls.WindowElement, _
                                    ByVal Mask As SCROLLINFOMASK, _
                                    ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As SCROLLINFO
        If Element Is Nothing Then Err.Raise errInvalidArgument
        USER32_GetScrollInfo.cbSize = LenB(USER32_GetScrollInfo)
        USER32_GetScrollInfo.fMask = Mask
        GetScrollInfo(Element.Handle, Type, USER32_GetScrollInfo)
    End Function
    
    Public Function USER32_GetScrollMinimum(ByRef Element As WindowsControls.WindowElement, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As Long
        Return USER32_GetScrollInfo(Element, SCROLLINFOMASK.SIF_RANGE, Type).nMin
    End Function
    
    Public Function USER32_GetScrollMaximum(ByRef Element As WindowsControls.WindowElement, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As Long
        Return USER32_GetScrollInfo(Element, SCROLLINFOMASK.SIF_RANGE, Type).nMax
    End Function
    
    Public Function USER32_GetScrollValue(ByRef Element As WindowsControls.WindowElement, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As Long
        Return USER32_GetScrollInfo(Element, SCROLLINFOMASK.SIF_POS, Type).nPos
    End Function
    
    Public Function USER32_GetScrollValueHot(ByRef Element As WindowsControls.WindowElement, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As Long
        Return USER32_GetScrollInfo(Element, SCROLLINFOMASK.SIF_TRACKPOS, Type).nTrackPos
    End Function
    
    Public Function USER32_GetScrollPageSize(ByRef Element As WindowsControls.WindowElement, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL) As Long
        Return USER32_GetScrollInfo(Element, SCROLLINFOMASK.SIF_PAGE, Type).nPage
    End Function
    
    Public Sub USER32_DrawFocusBox(ByVal hdc As LongPtr, ByRef rect As RECT)
        DrawFocusRect(hdc, rect)
    End Sub
    
    Public Sub USER32_SetScrollRange(ByRef Element As WindowsControls.WindowElement, ByVal Min As Long, ByVal Max As Long, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Dim scrollInfo As SCROLLINFO
        scrollInfo.cbSize = LenB(scrollInfo)
        scrollInfo.fMask = SCROLLINFOMASK.SIF_RANGE
        scrollInfo.nMin = Min
        scrollInfo.nMax = Max
        SetScrollInfo(Element.Handle, Type, scrollInfo, 1)
    End Sub
    
    Public Sub USER32_SetScrollValue(ByRef Element As WindowsControls.WindowElement, ByVal Value As Long, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Dim scrollInfo As SCROLLINFO
        scrollInfo.cbSize = LenB(scrollInfo)
        scrollInfo.fMask = SCROLLINFOMASK.SIF_POS
        scrollInfo.nPos = Value
        SetScrollInfo(Element.Handle, Type, scrollInfo, 1)
    End Sub
    
    Public Sub USER32_SetScrollPageSize(ByRef Element As WindowsControls.WindowElement, ByVal Value As Long, _ 
                                        ByVal Type As SCROLLTYPE = SCROLLTYPE.SB_CTL)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Dim scrollInfo As SCROLLINFO
        scrollInfo.cbSize = LenB(scrollInfo)
        scrollInfo.fMask = SCROLLINFOMASK.SIF_PAGE
        scrollInfo.nPage = Value
        SetScrollInfo(Element.Handle, Type, scrollInfo, 1)
    End Sub
    
    Public Sub USER32_SetCapture(ByRef Element As WindowsControls.WindowElement)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        SetCapture(Element.Handle)
    End Sub
    
    Public Sub USER32_ReleaseCapture()
        ReleaseCapture()
    End Sub
    
    Public Sub USER32_EnableWindow(ByRef Element As WindowsControls.WindowElement, ByVal Value As Boolean)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        EnableWindow(Element.Handle, CLng(If(Value, 1, 0)))
    End Sub

    Public Function USER32_GetWindow(ByRef Element As WindowsControls.WindowElement, ByVal uCmd As Long) As LongPtr
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Return GetWindow(Element.Handle, uCmd)
    End Function

    Public Function USER32_GetParent(ByVal hWnd As LongPtr) As LongPtr
    	Return GetParent(hWnd)
    End Function

    Public Function USER32_ShowWindow(ByVal hWnd As LongPtr, ByVal nCmdShow As Long) As Long
    	Return ShowWindow(hWnd, nCmdShow)
    End Function

    Public Sub USER32_SetWindowText(ByRef Element As WindowsControls.WindowElement, ByVal Value As String)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        SetWindowTextW(Element.Handle, Value)
    End Sub
    
    Public Function USER32_SendMessage(ByRef Element As WindowsControls.WindowElement, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Return SendMessageW(Element.Handle, wMsg, wParam, lParam)
    End Function
    
    Public Function USER32_SendMessageHandle(ByVal Handle As LongPtr, ByVal wMsg As Long, ByVal wParam As LongPtr, ByVal lParam As LongPtr) As LongPtr
        If Handle = 0 Then Err.Raise errInvalidArgument
        Return SendMessageW(Handle, wMsg, wParam, lParam)
    End Function

    Public Sub USER32_SetWindowLong(ByRef Element As WindowsControls.WindowElement, ByVal Index As Long, ByVal Value As Long)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        SetWindowLongW(Element.Handle, Index, Value)
    End Sub
    
    Public Function USER32_SetFont(ByRef Element As WindowsControls.WindowElement, ByRef Font As IFont) As LongPtr
        If Element Is Nothing Then Err.Raise errInvalidArgument
        If Font Is Nothing Then Err.Raise errInvalidArgument

        ' First make sure the font scaling matches the window DPI
        Font.SetRatio Element.DPI, 2540
            
        Dim LF As LOGFONT
        GetObjectW(Font.hFont, LenB(LF), LF)
        LF.LFQuality = CLEARTYPE_QUALITY
        Dim newFont As LongPtr = CreateFontIndirectW(LF)
        'Debug.Print "**** CREATED HFONT: " & newFont
    
        SendMessageW(Element.Handle, WM_SETFONT, newFont, 1)
        Return newFont
    End Function
    
    Public Function USER32_GetWindowPlacement(ByRef Element As WindowsControls.WindowElement) As WINDOWPLACEMENT
        If Element Is Nothing Then Err.Raise errInvalidArgument
        USER32_GetWindowPlacement.length = LenB(USER32_GetWindowPlacement)
        GetWindowPlacement(Element.Handle, USER32_GetWindowPlacement)
    End Function
    
    Public Sub USER32_SetWindowPlacement(ByRef Element As WindowsControls.WindowElement, ByRef wp As WINDOWPLACEMENT)
        If Element Is Nothing Then Err.Raise errInvalidArgument
    	SetWindowPlacement(Element.Handle, wp)
    End Sub
        
    Public Function GDI32_GetWindowFontHeight(ByRef Element As WindowsControls.WindowElement) As Long
        If Element Is Nothing Then Err.Raise errInvalidArgument

        Dim TextMetrics As TEXTMETRIC
        Dim WindowDC As LongPtr = GetDC(Element.Handle)
        GetTextMetricsW(WindowDC, TextMetrics)
        ReleaseDC(Element.Handle, WindowDC)
        Return TextMetrics.TMHeight
    End Function
    
    Public Sub USER32_FillWithBrush(ByRef Element As WindowsControls.WindowElement, ByVal hdc As LongPtr, ByVal Brush As LongPtr)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        
        Dim rect As RECT
        GetClientRect(Element.Handle, rect)
        FillRect(hdc, rect, Brush)
    End Sub
    
    Public Sub USER32_SetFocus(ByRef Element As WindowsControls.WindowElement)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        SetFocus(Element.Handle)
    End Sub
    
    Public Sub USER32_SetStyleFlag(ByRef Element As WindowsControls.WindowElement, ByVal Flag As Long, ByVal Value As Boolean)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        
        Dim styles As Long = GetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE)
        styles = styles And Not Flag
        If Value Then styles = styles Or Flag
        SetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE, styles)
    End Sub
    
    Public Function USER32_GetStyleFlag(ByRef Element As WindowsControls.WindowElement, ByVal Flag As Long) As Boolean
        If Element Is Nothing Then Err.Raise errInvalidArgument
        
        Dim styles As Long = GetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE)
        Return If(styles And Flag, True, False)
    End Function
    
    Public Sub USER32_SetStyleFlags(ByRef Element As WindowsControls.WindowElement, ByVal FlagsMask As Long, ByVal Flags As Long)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        
        Dim styles As Long = GetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE)
        styles = styles And Not FlagsMask
        styles += Flags
        SetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE, styles)
    End Sub
    
    Public Function USER32_GetStyleFlags(ByRef Element As WindowsControls.WindowElement, ByVal FlagsMask As Long) As Long
        If Element Is Nothing Then Err.Raise errInvalidArgument
        
        Dim styles As Long = GetWindowLongW(Element.Handle, WindowProperties.GWL_STYLE)
        Return styles And FlagsMask
    End Function
    
    Public Sub GDI32_DeleteObject(ByVal Handle As LongPtr)
        If Handle <> 0 Then
            DeleteObject(Handle)
        End If
    End Sub
    
    Public Sub USER32_ShowWindow(ByRef Element As WindowsControls.WindowElement, ByVal nCmdShow As Long)
        ShowWindow(Element.Handle, nCmdShow)
    End Sub
    
    Public Function USER32_GetParent(ByRef Element As WindowsControls.WindowElement) As LongPtr
        Return GetParent(Element.Handle)
    End Function
    
    Public Function GDI32_SetTextForeColor(ByVal HDC As LongPtr, ByVal Color As Long) As Long
        Return SetTextColor(HDC, Color)
    End Function
    
    Public Sub GDI32_SetBackColor(ByVal HDC As LongPtr, ByVal Color As Long)
        SetBkColor(HDC, Color)
    End Sub
    
    Public Function GDI32_SetBackMode(ByVal HDC As LongPtr, ByVal Mode As Long) As Long
        Return SetBkMode(HDC, Mode)
    End Function
    
    Public Function GDI32_CreateSolidBrushColor(ByVal Color As Long) As LongPtr
        Return CreateSolidBrush(Color)
    End Function
    
    Public Sub USER32_RedrawWindow(ByRef Element As WindowsControls.WindowElement, ByVal lprcUpdate As LongPtr, _
                                    ByVal hrgnUpdate As LongPtr, ByVal flags As RedrawFlags)
        RedrawWindow(Element.Handle, lprcUpdate, hrgnUpdate, flags)
    End Sub
    
    
    Public Sub USER32_RedrawRect(ByRef Element As WindowsControls.WindowElement, ByRef rect As RECT, ByVal Erase As Boolean)
        InvalidateRect(Element.Handle, rect, If(Erase, 1, 0))
    End Sub
    
    Public Function OLEAUT32_AllocateBSTR(ByVal CopyFrom As String, ByVal Length As Long) As String
        Return SysAllocStringLen(CopyFrom, Length)
    End Function

    Public Function OLEAUT32_SysAllocString(ByVal CopyFromNullTerminated As LongPtr) As String
    	Return SysAllocString(CopyFromNullTerminated)
    End Function
    
    Public Function USER32_GetWindowLong(ByRef Element As WindowsControls.WindowElement, ByVal Index As Long) As Long
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Return GetWindowLongW(Element.Handle, Index)
    End Function
    
    Public Function GDI32_TranslateColorFromHDC(ByVal Color As OLE_COLOR, ByVal hdc As LongPtr) As Long
        Dim currentPalette As LongPtr = GetCurrentObject(hdc, WindowGDIObjectTypes.OBJ_PAL)
        Return TranslateColor(Color, currentPalette)
    End Function
    
    Public Function USER32_GetListVisibleCount(ByRef Element As WindowsControls.WindowElement) As Long
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Dim rect As RECT
        GetClientRect(Element.Handle, rect)
        Const LB_GETITEMHEIGHT As Long = &H1A1
        Dim itemHeight As Long = CLng(SendMessageW(Element.Handle, LB_GETITEMHEIGHT, 0, 0))
        Return (rect.Bottom - rect.Top) \ itemHeight
    End Function
    
    Public Sub GDI32_TextOut(ByVal hDC As LongPtr, ByVal X As Long, ByVal Y As Long, ByRef Value As String)
        TextOutW(hDC, X, Y, Value, Len(Value))
    End Sub
    
    Public Function USER32_ListBoxIndexFromPoint(ByRef Element As WindowsControls.WindowElement, ByRef point As POINT, ByVal AutoScroll As Boolean) As Long
        If Element Is Nothing Then Err.Raise errInvalidArgument
        #If WIN64 Then
            Dim PointXY As LongLong = (CLngLng(point.Y) << 32) Or CLngLng(point.X)
            Return LBItemFromPt(Element.Handle, PointXY, If(AutoScroll, 1, 0))
        #Else
            Return LBItemFromPt(Element.Handle, point.X, point.Y, If(AutoScroll, 1, 0))
        #End If
    End Function
    
    Public Function USER32_GetComboBoxInfo(ByRef Element As WindowsControls.WindowElement) As COMBOBOXINFO
        If Element Is Nothing Then Err.Raise errInvalidArgument
        USER32_GetComboBoxInfo.cbSize = LenB(USER32_GetComboBoxInfo)
        GetComboBoxInfo(Element.Handle, USER32_GetComboBoxInfo)
    End Function
    
    Public Function GDI32_GetClipBox(ByVal hdc As LongPtr) As RECT
        GetClipBox(hdc, GDI32_GetClipBox)
    End Function
    
    Public Function USER32_GetWindowRect(ByRef Element As WindowsControls.WindowElement) As RECT
        If Element Is Nothing Then Err.Raise errInvalidArgument
        GetWindowRect(Element.Handle, USER32_GetWindowRect)
    End Function
    
    Public Sub KERNEL32_CopyMemory(ByVal Destination As LongPtr, ByVal Source As LongPtr, ByVal Length As LongPtr)
        RtlMoveMemory(Destination, Source, Length)
    End Sub
    
    Public Function GDI32_CreateCompatibleDC(Optional hdc As LongPtr) As LongPtr
        Return CreateCompatibleDC(hdc)
    End Function
    
    Public Function GDI32_SelectObject(ByVal hdc As LongPtr, ByVal gdiObject As LongPtr) As LongPtr
        Return SelectObject(hdc, gdiObject)
    End Function
    
    Public Function GDI32_DeleteDC(ByVal hdc As LongPtr) As Long
        Return DeleteDC(hdc)
    End Function
    
    Public Sub GDI32_GetTextMetrics(ByVal hdc As LongPtr, ByRef out As TEXTMETRIC)
        GetTextMetricsW(hdc, out)
    End Sub
    
    Public Sub USER32_ClientPointToScreen(ByRef Element As WindowsControls.WindowElement, ByRef point As POINT)
        If Element Is Nothing Then Err.Raise errInvalidArgument
        ClientToScreen(Element.Handle, point)
    End Sub
    
    Public Sub USER32_FillRectangle(ByVal hdc As LongPtr, ByRef rect As RECT, ByVal brush As LongPtr)
        FillRect(hdc, rect, brush)
    End Sub
    
    Public Function GDI32_SetBitmapStretchMode(ByVal hdc As LongPtr, ByVal mode As Long) As Long
        Return SetStretchBltMode(hdc, mode)
    End Function
    
    Public Function USER32_GetClientRect(ByRef Element As WindowsControls.WindowElement) As RECT
        If Element Is Nothing Then Err.Raise errInvalidArgument
        GetClientRect(Element.Handle, USER32_GetClientRect)
    End Function
    
    Public Sub GDI32_SetBrushOrigin(ByVal hDC As LongPtr, ByVal nXOrg As Long, ByVal nYOrg As Long, ByVal lppt As LongPtr)
        SetBrushOrgEx(hDC, nXOrg, nYOrg, lppt)
    End Sub
    
    Public Function KERNEL32_MulDiv32(ByVal nNumber As Long, ByVal nNumerator As Long, ByVal nDenominator As Long) As Long
        Return MulDiv(nNumber, nNumerator, nDenominator)
    End Function
    
    Public Function THEME_OpenData(ByRef Element As WindowsControls.WindowElement, ByVal pszClassList As String) As LongPtr
        If Element Is Nothing Then Err.Raise errInvalidArgument
        Return OpenThemeData(Element.Handle, pszClassList)
    End Function
    
    Public Sub THEME_CloseData(ByVal theme As LongPtr)
        CloseThemeData(theme)
    End Sub
    
    Public Function THEME_IsBackgroundPartiallyTransparent(ByVal Theme As LongPtr, iPartId As Long, iStateId As Long) As Boolean
        Return IsThemeBackgroundPartiallyTransparent(Theme, iPartId, iStateId) <> 0
    End Function
    
    Public Sub THEME_DrawParentBackground(ByVal hWnd As LongPtr, ByVal hDC As LongPtr, ByRef pRect As RECT)
        DrawThemeParentBackground(hWnd, hDC, pRect)
    End Sub
    
    Public Sub THEME_DrawBackground(ByVal Theme As LongPtr, ByVal hDC As LongPtr, ByVal iPartId As Long, ByVal iStateId As Long, ByRef pRect As RECT, ByRef pClipRect As RECT)
        DrawThemeBackground(Theme, hDC, iPartId, iStateId, pRect, pClipRect)
    End Sub
    
    Public Sub USER32_DrawFrameControl(ByVal hDC As LongPtr, ByRef outRect As RECT, ByVal Type As Long, ByVal InitialState As Long)
        DrawFrameControl(hDC, outRect, Type, InitialState)
    End Sub
    
    Public Function KERNEL32_GetVolumeInformationW(ByRef lpRootPathName As String, ByRef lpVolumeNameBuffer As String, ByRef nVolumeNameSize As Long, ByRef lpVolumeSerialNumber As LongPtr, ByRef lpMaximumComponentLength As LongPtr, ByRef lpFileSystemFlags As LongPtr, ByRef lpFileSystemNameBuffer As String, ByRef nFileSystemNameSize As Long) As Long
        Return GetVolumeInformationW(lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize)
    End Function
    
    Public Function KERNEL32_GetDriveTypeW(ByRef lpRootPathName As String) As Long
        Return GetDriveTypeW(lpRootPathName)
    End Function
    
    Public Function MPR_WNetGetConnectionW(ByRef lpLocalName As String, ByRef lpRemoteName As String, ByRef lpnLength As Long) As Long
        Return WNetGetConnectionW(lpLocalName, lpRemoteName, lpnLength)
    End Function
    
    Public Function USER32_GetSysColorBrush(ByVal nIndex As Long) As LongPtr
    	Return GetSysColorBrush(nIndex)
    End Function
             
End Module